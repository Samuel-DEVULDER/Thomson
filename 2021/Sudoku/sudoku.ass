(main)SUDOKU

DEBUG SET   0     ; debug la resolution
SHRTC SET   1     ; retarde la detection des contradiction (plus rapide)
DYNST SET   1     ; Adapte la position du demarrage de la recherche dynamiquement (plus rapide)
GRID  SET   17

DBGEN SET   0     ; debug la generation
GENMX SET   0     ; algorithme de generation 0/1

  ORG   $A000
  BRA   INI

***************************************
* Le sudoku a resoudre
***************************************
SUDOKU
  IFEQ  GRID
  RMB   9*9,'0
  ENDC
  IFEQ  GRID-1
  FCC   "000000001"
  FCC   "210000904"
  FCC   "403500600"
  FCC   "900204500"
  FCC   "002705800"
  FCC   "001608003"
  FCC   "004007309"
  FCC   "709000068"
  FCC   "100000000"
  ENDC
  IFEQ  GRID-17
  FCC   "000000010"
  FCC   "000002003"
  FCC   "000400000"
  FCC   "000000500"
  FCC   "401600000"
  FCC   "007100000"
  FCC   "050000200"
  FCC   "000080040"
  FCC   "030910000"
  ENDC
***************************************
* Point d'entree
***************************************
INI
  PSHS  D,X,Y,U,CC,DP
  STS   BAKS-2
  LDS   #STACKTOP


  JSR   PUTS
  FCC   "Input:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0


  JSR   TMRON
  JSR   TOWORK
  LDU   #CPYSOL
  JSR   SOLVE
  JSR   TMROFF

  LBCC  NOSOL

  JSR   PUTS
  FCC   "Output:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0
  JMP   FINSOL

*  lecture arguments a exec
  JSR   $3FFD       ; argument dispo ?
  BEQ   USAGE       ; non => passe
  JSR   $3FEB       ; lecture argment
  CMPX  #17         ; <17 pas de sol
  BLT   USAGE
  CMPX  #81         ; >=81 inutile
  BGT   USAGE
  TFR   X,D         ; passage de X
  TFR   B,A         ; dans A
  BRA INI1
USAGE
  JSR   PUTS
  FCC "Usage:"
  FCB 13,10
  FCC "  EXEC &HA000,NB_INDICES"
  FCB 13,10
  FCC "avec"
  FCB 13,10
  FCC "  17 <= NB_INDICES <= 81"
  FCB 13,10,0
  JMP EXIT
INI1

  JSR   RNDINI      ; ajoute un peu d'entropie

  JSR   PUTS
  FCC   "Generation..."
  FCB   $18,0
  JSR   TMRON
  JSR   GENERATE
  JSR   TMROFF
  JSR   TMRPRT
  JSR   PUTS
  FCC   "secs"
  FCB   13,10,0

  JSR   PUTS
  FCC   "Input:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0

  JSR   TMRON
  JSR   TOWORK
  LDU   #CPYSOL
  JSR   SOLVE
  JSR   TMROFF
  BCC   NOSOL

  JSR   PUTS
  FCC   "Output:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0
  BRA   FINSOL

NOSOL
  BSR   PUTS
  FCC   "No solution!"
  FCB   10,13,0

FINSOL
  JSR   PUTS
  FCC   "Time: "
  FCB   0
  JSR   TMRPRT
  JSR   PUTS
  FCC   "secs"
  FCB   13,10,0
EXIT
  LDS   #0000
BAKS
  PULS  D,X,Y,U,CC,DP,PC

***************************************
* Affiche le sudoku
***************************************
AFFICHE
  PSHS  D,X
  LDX   #SUDOKU
  BSR   AFF3S
  BSR   SCROLL
  BSR   AFFIV
  BSR   AFF3L
  BSR   AFFIV
  BSR   AFF3S
  PULS  D,X,PC
* scroll 3 lignes
SCROLL
  BSR   PUTS
  FCB   10,10,10,11,11,11,$80
AFFIV
  BSR   PUTS
  FCB   $1B,$5C,$80
* scroll + 3 ligne
AFF3S
  BSR   SCROLL
* affiche un bloc de 3 lignes
AFF3L
  BSR   AFF1L
  BSR   AFF1L
* affiche une ligne
AFF1L
  BSR   AFF3I
  BSR   AFF3I
  BSR   AFF3I
  BSR   AFFIV
  BSR   PUTS
  FCB   8,8,8
  FCB   8,8,8
  FCB   8,8,8
  FCB   10,$80
* inv vide + 3 char
AFF3I
  BSR   AFFIV
* affiche 3 char
AFF3
  BSR   AFF1
  BSR   AFF1
* affiche 1 char
AFF1
  LDB   ,X+
  CMPB  #'0
  BNE   PUTC
  LDB   #'.
  IFNE  *-PUTC
  ERROR "/!\ passe au travers"
  ENDC

***************************************
* affiche un caractere
***************************************
PUTC
  JMP   $E803

***************************************
* affiche une chaine
*
* La chaine suit le code appellant.
* Si la chaine se termine par 0, alors
* on retourne a l'instruction qui suit.
* Si en revanche elle se termine par
* une valeur negative, on poursuit sur
* la routine au dessus.
***************************************
PUTS
  PSHS  B,X
  LDX   3,S
PUTS1
  LDB   ,X+
  BMI   PUTS3
  BEQ   PUTS2
  BSR   PUTC
  BRA   PUTS1
PUTS2
  STX   3,S
  PULS  B,X,PC
PUTS3
  PULS  B,X
  LEAS  2,S
  RTS

***************************************
* Activation timer
***************************************
TIMEPT  EQU   $6027
STATUS  EQU   $6019
TMRON
  PSHS  D,CC
  ORCC  #$50
  LDD   #0
  STD   TMRDAT
  STD   TMRDAT+2

  LDD   TIMEPT
  STD   TMROLD+1
  LDD   #TMRSVC
  STD   TIMEPT
  LDA   #$20
  ORA   STATUS
  STA   STATUS

  LDA   #$10    ; capture etat IRQ
  ANDA  ,S
  STA   TMRCC+1

  LDA   #$EF    ; active IEQ
  ANDA  ,S
  STA   ,S
  PULS  D,CC,PC

***************************************
* Desactivation timer
***************************************
TMROFF
  PSHS  D,CC
  ORCC  #$50
  LDA   #255-$20
  ANDA  STATUS
  STA   STATUS
TMROLD
  LDD   #0
  STD   TIMEPT
  LDA   #$EF
  ANDA  ,S
TMRCC
  ORA   #0
  STA   ,S
  PULS  CC,D,PC

***************************************
* Affichage timer
***************************************
TMRPRT
  PSHS  X,D,CC
  ORCC  #$50
  LDX   #TMRDAT+4
  LDA   #4
TMRPR1
  LDB   ,-X     ; on empile les
  ANDB  #15     ; 8 digits
  STB   ,-S
  LDB   ,X
  LSRB
  LSRB
  LSRB
  LSRB
  STB   ,-S
  DECA
  BNE   TMRPR1
  LDB   #$80
  ORB   6,S     ; on marque le
  STB   6,S     ; chiffre des unites
TMRPR2
  LDB   ,S+
  BEQ   TMRPR2  ; on saute au dessus des '0'
  BMI   TMRPR4  ; => dernier chiffre
TMRPR3
  BSR   TMRPR5
  LDB   ,S+     ; suivant
  BPL   TMRPR3
TMRPR4
  ANDB  #$7F    ; l'avant dernier chiffre
  BSR   TMRPR5
  LDB   #'.
  JSR   PUTC
  LDB   ,S+
  BSR   TMRPR5
  PULS  X,D,CC,PC
TMRPR5
  ADDB  #'0
  JMP   PUTC

***************************************
* Interruption timer
***************************************
TMRSVC
  LDX   #TMRDAT+4
  COMA          ; C=1
TMRSV1
  LDA   ,-X     ; le compteur
  ADCA  #0      ; marche directemetnt
  DAA           ; en BCD
  STA   ,X
  BCS   TMRSV1
  JMP   $E830

***************************************
* Donnee Timer
***************************************
TMRDAT
  FDB   0,0

***************************************
* Converti le SUDOKU vers WORK
* (espace dde travail optimise)
***************************************
TOWORK
  PSHS  D,X,U
  LDX   #WORK
  CLRB
TOW1
  LDA   #9
  STA   ,X
  CLRA
  STD   1,X
  STD   3,X
  STD   5,X
  STD   7,X
  STD   9,X
  LEAX  51,X
  CMPX  #WORK+81*51
  BNE   TOW1
  LDX   #SUDOKU
  LDU   #WORK+1
TOW2
  LDA   ,X+
  SUBA  #'0
  JSR   PUTDIGIT
  LEAU  51,U
  CMPX  #SUDOKU+81
  BNE   TOW2
  PULS  D,X,U,PC

***************************************
* Converti le WORK vers SUDOKU
***************************************
TOSUDOKU
  PSHS  D,X,U
  LDX   #SUDOKU
  LDU   #WORK+1
TOSUD1
  LDB   ,U
  LEAU  51,U
  ADDB  #'0
  STB   ,X+
  CMPX  #SUDOKU+81
  BNE   TOSUD1
  PULS  D,X,U,PC

***************************************
* Callback qui stoppe a la 1ere soluce
* et copy le resultat dans SUDOKU
***************************************
CPYSOL
  BSR   TOSUDOKU

***************************************
* Callback qui stoppe a la 1ere soluce
***************************************
CHKSOL
  COMB        ; C=1 ==> on stoppe
  RTS

***************************************
* Algo de resolution
*
* En entree:
*   WORK initialise (TOWORK)
*
*   U=addr. routine appelle si une
*       solution est trouvee.
*       Cette routine doit retourner:
*       C=0 (CLRB) s'il faut continuer
*       C=1 (COMB) s'il faut stopper.
*
* En sortie:
*   WORK inchange
*   C=0 si allee jusqu'au bout
*       (pas de solution)
*   C=1 sinon
*       (solution trouvee)
***************************************
SOLVE
  PSHS  DP,X,Y,U,D
  SETDP BSTCNT<-8
  LDA   #BSTCNT<-8
  TFR   A,DP
  STU   <SOLFND+1

  IFNE  DEBUG
  JSR   PUTS
  FCC   "DEBUG:"
  FCB   10,13,32,32,0
  JSR   DBGPRT
  JSR   PUTS
  FCB   $14,$1B,$68,0
  ENDC

  IFNE  DYNST
  LDX   #WORK+1-51
SOLINI1
  LEAX  51,X
  LDA   ,X
  BGT   SOLINI1
  STX   <SOLSTART+1
  ENDC
  
  JSR   <SOLV0

  IFNE  DEBUG
  PSHS  CC
  JSR   PUTS
  FCB   $11,$1B,$69,11,13,$18
  FCB   10,$18,10,$18,10,$18,10,$18,10,$18
  FCB   10,$18,10,$18,10,$18,10,$18,10,$18
  FCB   11,11,11,11,11,11,11,11,11,11,0
  PULS  CC
  ENDC

  PULS  DP,X,Y,U,D,PC

* alignement DP
  RMB   ((*+255)&$FF00)-*,0

***************************************
* recherche recursive
* Sortie A=0
*        C=1 si on stoppe la recherche
*        C=0 si on doit continuer la
*               recherche.
*
* WORK est remis a son etat d'entree en
* sortie
***************************************
SOLV0
  PSHS  B,U

  IFNE  DEBUG
  JSR   DBGPRT
  ENDC

  IFNE  DYNST
  LDB   #-51       ; -majorant
SOLSTART
  LDX   #WORK+1
  LEAX  B,X
  NEGB
  STB   <BSTCNT+1
  ELSE
  LDB   #51       ; majorant
  STB   <BSTCNT+1
  LDX   #WORK-50
  ENDC

***************************************
* recherche une case vide avec le moins
* de contraintes
***************************************
SOLV1
  ABX
  LDA   ,X        ; case vide ?
  BGT   SOLV1     ; non => boucle
  BMI   SOLV4     ; sentinelle ?
  LDA   -1,X
BSTCNT
  CMPA  #0        ; meilleure ?
  BGE   SOLV1     ; non => case suivante
  STA   <BSTCNT+1 ; on sauve le nouveau nb de choix,
  BEQ   SOLRET0   ; infaisable ? oui => termine
  STX   <BSTCEL+1 ; sauve la case actuelle

  IFNE  SHRTC
  DECA            ; raccourcis: si un seul choix
  BNE   SOLV1     ; on s'arrete la en ignorant les impossibilites
  ELSE
  BRA   SOLV1
  ENDC

***************************************
* on a fini de dergarder toutes les
* cases
***************************************
SOLV4
  LDB   <BSTCNT+1
  SUBB  #51       ; a t'on rencontre une
  BNE   BSTCEL    ; case libre ?
SOLFND
  JSR   >$1234    ; non => la grille est pleine
  LDA   #0        ; appel du callback pour poursuivre
  PULS  B,U,PC    ; ou pas (force A=0 sans change carry)
BSTCEL
  LDU   #0        ; oui => recup addr. case
  CLRB            ; masque des chifres 1 a 8 libres
  LDA   1,U
  BNE   *+4
  ORB   #1
  LDA   2,U
  BNE   *+4
  ORB   #2
  LDA   3,U
  BNE   *+4
  ORB   #4
  LDA   4,U
  BNE   *+4
  ORB   #8
  LDA   5,U
  BNE   *+4
  ORB   #16
  LDA   6,U
  BNE   *+4
  ORB   #32
  LDA   7,U
  BNE   *+4
  ORB   #64
  LDA   8,U
  BNE   *+4
  ORB   #128

***************************************
* on essaie toutes les possibilites
***************************************
  LDA   9,U       ; chiffre 9 possible ?
  BNE   SOLV5     ;
  LDA   #9        ; oui => on l'essaye
  BSR   SOLTRY
  BCS   SOLRET1   ; arrete si C=1
SOLV5
  LDX   #FIRSTBITSET
  ABX             ; autres chiffres (dans B)
  ABX
  LDA   ,X        ; chiffre dans B ?
  BEQ   SOLRET0   ; non => termine avec C=0
  EORB  1,X       ; oui => efface chiffre dans masque
  BSR   SOLTRY    ; essaye ce chiffre
  BCC   SOLV5     ; continue autre chiffre si C=0

***************************************
* Sort de la recherche avec A=0 C=0/1
***************************************
SOLRET1
  LDA   #1        ; termine ce niveau avec
  LSRA            ; A=0 et C=1 (==on cherche pas plus)
  PULS  B,U,PC
SOLRET0
  CLRA            ; termine ce niveau avec
  PULS  B,U,PC    ; A=0 et C=0

***************************************
* Pose le chiffre "A" dans la case "U"
* et lance une recherche. En sortie
* retire ce chiffre, et retourne C=0/1
***************************************
SOLTRY
  JSR   <PUTDGT
  JSR   <SOLV0
* JMP   CLRDGT
  IFNE  *-CLRDGT
  ERROR "/!\ fall through"
  ENDC

***************************************
* Efface le chiffre dans la case "U"
* en mainteant les donnees de contraintes
*
* Entree A=0
*        U=case
* Sortie A=0
*        U=inchange
*        X=trash
*        Y=trash
*        C=inchangee
***************************************
CLRDGT
  IFNE  DYNST
  PSHS  B,U,CC
  ELSE
  PSHS  B,U
  ENDC
  LDB   ,U        ; deja un chiffre ?
  BEQ   CLRDGT1   ; non => saute
  
  IFNE  DYNST
  CMPU  <SOLSTART+1
  BHS   CLRDGT0
  STU   <SOLSTART+1
CLRDGT0  
  ENDC
  
  STA   ,U        ; efface chiffre
  LEAU  10,U      ; avance jsuqu'aux pointeurs
  BSR   CLRDGT2   ; |
  BSR   CLRDGT2   ; | mets a jour les stats
  BSR   CLRDGT2   ; | du chiffre efface pour
  BSR   CLRDGT2   ; | les 20 cases dependantes
  BSR   CLRDGT2   ; | de "U"
CLRDGT1
  IFNE  DYNST
  PULS  B,U,CC,PC
  ELSE
  PULS  B,U,PC
  ENDC
CLRDGT2
  PULU  X,Y       ; recupere deux pointeur sur cases dependante
* mets a jour les contraintes de case "X"
  DEC   B,X       ; decremente X->contrainte[chiffre-efface]
  BNE   CLRDGT3   ; si passe a zero ?
  INC   -1,X      ; oui => augmente 1 chiffre possible sur la case dependante
CLRDGT3
* mets a jour les contraintes de case "Y"
  DEC   B,Y       ; idem mais avec la case "Y"
  BNE   CLRDGT4
  INC   -1,Y
CLRDGT4
  PULU  X,Y       ; recupere deux pointeur sur cases dependante
* mets a jour les contraintes de case "X"
  DEC   B,X       ; decremente X->contrainte[chiffre-efface]
  BNE   CLRDGT5   ; si passe a zero ?
  INC   -1,X      ; oui => augmente 1 chiffre possible sur la case dependante
CLRDGT5
* mets a jour les contraintes de case "Y"
  DEC   B,Y       ; idem mais avec la case "Y"
  BNE   CLRDGT6
  INC   -1,Y
CLRDGT6
  RTS

***************************************
* Place le chiffre "A" (0..9, 0=efface)
* dans la case "U" en mainteant les
* donnees de contraintes.
*
* Entree A=chiffre
*        U=case
* Sortie A,B,X,Y,U=inchanges
***************************************
* Place un digit
PUTDIGIT
  PSHS  A,X,Y
  CLRA            ; on commence par effacer
  BSR   CLRDGT    ; chiffre en case "U"
  LDA   ,S        ; recupe "A"
  BEQ   *+4       ; vrai chiffre 1 a 9 ?
  BSR   PUTDGT    ; oui => alors on le place
  PULS  A,X,Y,PC

***************************************
* Retourne un nombre aleatoire entre 0
* et 255 dans B (A ecrase)
*
* Algo XOR-SHIFT 798 de George
* Marsaglia:
*  - petit (19 octets, RTS inclus)
*  - rapide (36 cycles, RTS inclus)
*  - adapte aux 8 bits (rotation 1bit)
*  - couvre tous les entiers 16bits!=0
*
* Resultat:
* B = nb aleatoire entre 0 et 255
* A detruit (utiliser RND+1 si on veut
*            16 bits aleatoires)
*
* (mis ici pour beneficier du DP)
***************************************
RND
  LDD   #1      ; graine
  LSRA
  RORB
  EORB  <RND+1
  STB   <RND2+1
  RORB
  EORB  <RND+2
  STB   <RND+2
RND2
  EORB  #0
  STB   <RND+1
  RTS

***************************************
* Place le chiffre "A" dans la case "U"
* en mainteant les donnees de contraintes.
*
* Entree A=chiffre 1..9
*        U=case
* Sortie A=inchange
*        U=inchange
*        C=inchangee
***************************************
PUTDGT
  
  IFNE  DYNST
  PSHS  B,U,CC
  CMPU  <SOLSTART+1
  BNE   PUTDGT1
  LEAX  ,U
PUTDGT0
  LEAX  51,X
  LDB   ,X
  BGT   PUTDGT0
  STX   <SOLSTART+1
PUTDGT1
  ELSE
  PSHS  B,U
  ENDC
  
  STA   ,U        ; ecrit chiffre
  LEAU  10,U      ; avanche jusqu'au pointeurs
  BSR   PUTDGT2   ; |
  BSR   PUTDGT2   ; | mise a jour des 20
  BSR   PUTDGT2   ; | cases dependantes
  BSR   PUTDGT2   ; |
  BSR   PUTDGT2   ; |
  
  IFNE  DYNST
  PULS  B,U,CC,PC
  ELSE
  PULS  B,U,PC
  ENDC
PUTDGT2
  PULU  X,Y       ; recup deux pointeurs sur cases dependantes
  LDB   A,X       ; chiffre deja utilise par X->contraintes[chiffre] ?
  BNE   PUTDGT3   ; oui => increment simple
  DEC   -1,X      ; non ==> 1 degre de liberte en moins
PUTDGT3
  INC   A,X       ; marque chiffre comme utilise une fois de plus
  LDB   A,Y
  BNE   PUTDGT4   ; idem avec case contrainte "Y"
  DEC   -1,Y
PUTDGT4
  INC   A,Y
  PULU  X,Y       ; recup deux pointeurs sur cases dependantes
  LDB   A,X       ; chiffre deja utilise par X->contraintes[chiffre] ?
  BNE   PUTDGT5   ; oui => increment simple
  DEC   -1,X      ; non ==> 1 degre de liberte en moins
PUTDGT5
  INC   A,X       ; marque chiffre comme utilise une fois de plus
  LDB   A,Y
  BNE   PUTDGT6   ; idem avec case contrainte "Y"
  DEC   -1,Y
PUTDGT6
  INC   A,Y
  RTS

***************************************
* Callback qui stoppe a la 2e soluce
* (initialise TWOSOL+1 a +1)
***************************************
TWOSOL
  LDB   #0        ; compteur de nb solution
  SUBB  #1        ; decremente (SUBB pour positionner C)
  STB   TWOSOL+1  ; sauvegarde
  RTS             ; retourne C=1 lorsque la valeur passe a -1

  IFNE 0
***************************************

CODE PAS ACTIF A REVOIR

***************************************
* Genere un sudoku avec A indices
* (cases non vides).
*
* Attention, si A est trop faible
* (<17) l'algo peut ne pas terminer.
* Il faut mieux avoir A autour de 25
* pour avoir un temps de generation
* pas trop long et avoir un algo qui
* termine.
***************************************
GENERATE
  PSHS  D,X,Y,U,DP
  LDB   #BSTCNT<-8
  TFR   B,DP
*  LDY   #BITCOUNT+128

GEN1
  IFNE  DBGEN
  JSR PUTS
  FCB $18,10,$18,10,$18,10
  FCB $18,10,$18,10,$18,10
  FCB $18,10,$18,10,$18,10
  FCB 11,11,11
  FCB 11,11,11
  FCB 11,11,11
  FCC   "."
  FCB 0
  ENDC

* grille de depart
  JSR   GENSTART

* mise en place compteurs
  LDB   ,S        ; max cases bloquees
  LDA   #81
  SUBA  ,S        ; nombre de trous a creer
  BEQ   GENDONE   ; aucun ? oui => fini


* phase 1 on efface au pif et tant que ca reste en solution
* unique on continue
GEN2a
  JSR   GENRND
  LDX   ,U
  CLR   ,U
  CLR   1,U
  JSR   GENCHK
  BNE   GEN2b
  DECA
  BEQ   GENDONE
  BRA   GEN2a
GEN2b
  STX   ,U

GEN3
  PSHS  D         ; (2) sauve nb restant (A) et nb spare (B)

* Majorant/minorant
  IFNE  GENMX
  LDB   #10
  STB   <BSTCNT+1
  ELSE
  CLR   <BSTCNT+1
  ENDC

  IFNE  DBGEN
  JSR   DBGPRT
  ENDC

* on trouve la case ayant le plus de possibilites
  LDU   #WORK-42
  BRA   GEN6
GEN4
  PSHS  D         ; recolle avec le PULS X
  LDD   #0
  STD   ,U        ; sentinelle
  LEAU  40,U
  LDX   ,U
GEN5
  ORA   ,X        ; bitmask "or" avec les chiffres
  ORB   1,X       ; de la case contraignante
  LDX   ,--U      ; sentinelle atteinte ?
  BNE   GEN5      ; non => continue
  PULS  X         ; recolle avec PSHS D
  STX   ,U        ; retire sentinelle

  ANDA  #1
  ADDA  B,Y       ; combien de contraintes
  CMPA  <BSTCNT+1 ; plus qu'avant ?
  IFNE  GENMX
  BGE   GEN6      ; oui => saute
  ELSE
  BLE   GEN6
  ENDC
  STA   <BSTCNT+1 ; non => garde
  STU   <BSTCEL+1
GEN6
  LEAU  42,U
  LDD   ,U
  BEQ   GEN6
  BMI   GEN6a
  BITA  #2
  BNE   GEN6
  BRA   GEN4

* recup contenu case a effacer
GEN6a
  LDU   <BSTCEL+1
  LDD   ,U
  BSR   GENCHK      ; une seule solution ?
  BEQ   GEN7        ; oui => continue
  ORA   #2          ; non => marque bloque'
  STD   ,U
  PULS  D           ; match (2)
  DECB
  BNE   GEN3        ; on essaye avec une autre case
  JMP   GEN1        ; plus de spare ==> nouvelle grille

GEN7
  PULS  D           ; match (2)
  DECA              ; encore ?
  BNE   GEN3        ; oui ==> autre case

GENDONE
  JSR   TOSUDOKU    ; non => termine'
  PULS  D,X,Y,U,DP,PC

* verifie qu'en effacant la case pointee par U on a
* bien une solution unique
GENCHK
  PSHS  D,U
  LDD   #0
  STD   ,U          ; efface case
  LDU   #TWOSOL
  LDB   #1          ; regarde si le
  STB   1,U         ; sudoku resultant
  JSR   SOLVE       ; a exactement 1 sol
  LDB   1,U         ; plus rapide que tst!
  PULS  D,U,PC


* tire une case "pleine" au pif (retour dans U)
GENRND
  PSHS  D
GENRN2
  JSR   <RND
  LDA   #81
  MUL
  LDB   #42
  MUL
  ADDD  #WORK
  TFR   D,U       ; U=case au pif
  LDD   ,U        ; deja vide ?
  BEQ   GENRN2    ; oui => on retire
  BITA  #2        ; case bloquee ?
  BNE   GENRN2    ; oui => on retire
  PULS  D,PC

* Genere une grille de depart
GENSTART
* met tout a 0
  LDU   #WORK
  LDX   #0
GENS1
  STX   ,U
  LEAU  42,U
  LDD   ,U
  BPL   GENS1

* rempli les chiffre 1 a 9 au hasard
*  LDX   #MASKS+20
GENS2
  STD   ,U          ; ecriture chiffre
GENS3
  JSR   <RND
  LDA   #81
  MUL
  LDB   #42
  MUL
  ADDD  #WORK
  TFR   D,U
  LDD   ,U
  BNE   GENS3
  LDD   ,--X        ; nouveau chiffre
  BNE   GENS2

* qu'on resout
  LDU   #CPYSOL
  JSR   SOLVE       ; resout le sudoku
  JMP   TOWORK      ; retour dans work
****************************************
  ENDC

  SETDP 255

****************************************
* initialise le generateur aleatoire
* dans un etat inconnu.
****************************************
RNDINI
  PSHS  D,X
  LDX   #0
RNDIN1
  ADDD  ,X++
  CMPX  #$E7C6
  BNE   RNDIN1
  ADDD  ,X
  BNE   RNDIN2
  INCB
RNDIN2
  STD   >RND+1
  PULS  D,X,PC

  IFNE  DEBUG+DBGEN
***************************************
* affiche le sudoku pour le debug
***************************************
DBGPRT
  PSHS  D,X,Y,U,DP,CC
  JSR   TOSUDOKU
  JSR   AFFICHE
  JSR   PUTS
  FCB   11,11,11,11,11
  FCB   11,11,11,11,0
  PULS  D,X,Y,U,DP,CC,PC
  ENDC

***************************************
* Tableau le 1er bit a 1
***************************************
/ EXECUTER CE QUI SUIT POUR GENERER
./luajit - <<EOF
for i=0,255 do
  if (i%8)==0 then
    io.stdout:write('\n  FCB \t')
  elseif i>0 then
    io.stdout:write(',')
  end
  i,n = (i+256)%256, 0
  while i>0 and i%2==0 do i,n = math.floor(i/2),n+1 end
  if i==0 then
    io.stdout:write('0,0')
  else
    io.stdout:write((n+1)..','..2^n)
  end
end
io.stdout:write('\n')
EOF
/
FIRSTBITSET
  FCB   0,0,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   5,16,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   6,32,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   5,16,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   7,64,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   5,16,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   6,32,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   5,16,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   8,128,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   5,16,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   6,32,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   5,16,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   7,64,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   5,16,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   6,32,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   5,16,1,1,2,2,1,1,3,4,1,1,2,2,1,1
  FCB   4,8,1,1,2,2,1,1,3,4,1,1,2,2,1,1

***************************************
* ESPACE DE TRAVAIL
*
* Sructure:
*    81*(case)
*    FDB -1
* case:
*    FCB nb_chiffres_libres
*    FCB chiffre (decimal)
*    RMB 9,0 (tableau d'usage des chiffres)
*    20*(FDB <ADRESSE CASE INFLUENTES>)
***************************************
/ EXECUTER POUR GENERER:
reset; ./luajit - <<EOF
long = false
print('WORK')
for i=0,8 do
  for j=0,8 do
    print('  RMB ', '11,0', '; CASE ' .. i .. ',' ..j)
    t = {}
    for k=0,8 do
      if k~=i then
        if long then
          print('  FDB ', 'WORK+'..((k*9 + j)*51+1)..'   ', '; '..k..','..j)
        else
          table.insert(t, 'WORK+'..((k*9 + j)*51+1))
        end
      end
    end
    for k=0,8 do
      if k~=j then
        if long then
          print('  FDB ', 'WORK+'..((i*9 + k)*51+1)..'   ', '; '..i..','..k)
        else
          table.insert(t, 'WORK+'..((i*9 + k)*51+1))
        end
      end
    end
    local ii,jj=math.floor(i/3)*3,math.floor(j/3)*3
    for ii=ii,ii+2 do
      for jj=jj,jj+2 do
        if ii~=i and jj~=j then
          if long then
            print('  FDB ', 'WORK+'..((ii*9 + jj)*51+1)..'   ', '; '..ii..','..jj)
          else
            table.insert(t, 'WORK+'..((ii*9 + jj)*51+1))
          end
        end
      end
    end
    for i=1,#t,4 do print('  FDB ', t[i]..','..t[i+1]..','..t[i+2]..','..t[i+3]) end t = {}
  end
end
print('  FDB ',-1,'; sentinel')
EOF
/
WORK
  RMB   11,0    ; CASE 0,0
  FDB   WORK+460,WORK+919,WORK+1378,WORK+1837
  FDB   WORK+2296,WORK+2755,WORK+3214,WORK+3673
  FDB   WORK+52,WORK+103,WORK+154,WORK+205
  FDB   WORK+256,WORK+307,WORK+358,WORK+409
  FDB   WORK+511,WORK+562,WORK+970,WORK+1021
  RMB   11,0    ; CASE 0,1
  FDB   WORK+511,WORK+970,WORK+1429,WORK+1888
  FDB   WORK+2347,WORK+2806,WORK+3265,WORK+3724
  FDB   WORK+1,WORK+103,WORK+154,WORK+205
  FDB   WORK+256,WORK+307,WORK+358,WORK+409
  FDB   WORK+460,WORK+562,WORK+919,WORK+1021
  RMB   11,0    ; CASE 0,2
  FDB   WORK+562,WORK+1021,WORK+1480,WORK+1939
  FDB   WORK+2398,WORK+2857,WORK+3316,WORK+3775
  FDB   WORK+1,WORK+52,WORK+154,WORK+205
  FDB   WORK+256,WORK+307,WORK+358,WORK+409
  FDB   WORK+460,WORK+511,WORK+919,WORK+970
  RMB   11,0    ; CASE 0,3
  FDB   WORK+613,WORK+1072,WORK+1531,WORK+1990
  FDB   WORK+2449,WORK+2908,WORK+3367,WORK+3826
  FDB   WORK+1,WORK+52,WORK+103,WORK+205
  FDB   WORK+256,WORK+307,WORK+358,WORK+409
  FDB   WORK+664,WORK+715,WORK+1123,WORK+1174
  RMB   11,0    ; CASE 0,4
  FDB   WORK+664,WORK+1123,WORK+1582,WORK+2041
  FDB   WORK+2500,WORK+2959,WORK+3418,WORK+3877
  FDB   WORK+1,WORK+52,WORK+103,WORK+154
  FDB   WORK+256,WORK+307,WORK+358,WORK+409
  FDB   WORK+613,WORK+715,WORK+1072,WORK+1174
  RMB   11,0    ; CASE 0,5
  FDB   WORK+715,WORK+1174,WORK+1633,WORK+2092
  FDB   WORK+2551,WORK+3010,WORK+3469,WORK+3928
  FDB   WORK+1,WORK+52,WORK+103,WORK+154
  FDB   WORK+205,WORK+307,WORK+358,WORK+409
  FDB   WORK+613,WORK+664,WORK+1072,WORK+1123
  RMB   11,0    ; CASE 0,6
  FDB   WORK+766,WORK+1225,WORK+1684,WORK+2143
  FDB   WORK+2602,WORK+3061,WORK+3520,WORK+3979
  FDB   WORK+1,WORK+52,WORK+103,WORK+154
  FDB   WORK+205,WORK+256,WORK+358,WORK+409
  FDB   WORK+817,WORK+868,WORK+1276,WORK+1327
  RMB   11,0    ; CASE 0,7
  FDB   WORK+817,WORK+1276,WORK+1735,WORK+2194
  FDB   WORK+2653,WORK+3112,WORK+3571,WORK+4030
  FDB   WORK+1,WORK+52,WORK+103,WORK+154
  FDB   WORK+205,WORK+256,WORK+307,WORK+409
  FDB   WORK+766,WORK+868,WORK+1225,WORK+1327
  RMB   11,0    ; CASE 0,8
  FDB   WORK+868,WORK+1327,WORK+1786,WORK+2245
  FDB   WORK+2704,WORK+3163,WORK+3622,WORK+4081
  FDB   WORK+1,WORK+52,WORK+103,WORK+154
  FDB   WORK+205,WORK+256,WORK+307,WORK+358
  FDB   WORK+766,WORK+817,WORK+1225,WORK+1276
  RMB   11,0    ; CASE 1,0
  FDB   WORK+1,WORK+919,WORK+1378,WORK+1837
  FDB   WORK+2296,WORK+2755,WORK+3214,WORK+3673
  FDB   WORK+511,WORK+562,WORK+613,WORK+664
  FDB   WORK+715,WORK+766,WORK+817,WORK+868
  FDB   WORK+52,WORK+103,WORK+970,WORK+1021
  RMB   11,0    ; CASE 1,1
  FDB   WORK+52,WORK+970,WORK+1429,WORK+1888
  FDB   WORK+2347,WORK+2806,WORK+3265,WORK+3724
  FDB   WORK+460,WORK+562,WORK+613,WORK+664
  FDB   WORK+715,WORK+766,WORK+817,WORK+868
  FDB   WORK+1,WORK+103,WORK+919,WORK+1021
  RMB   11,0    ; CASE 1,2
  FDB   WORK+103,WORK+1021,WORK+1480,WORK+1939
  FDB   WORK+2398,WORK+2857,WORK+3316,WORK+3775
  FDB   WORK+460,WORK+511,WORK+613,WORK+664
  FDB   WORK+715,WORK+766,WORK+817,WORK+868
  FDB   WORK+1,WORK+52,WORK+919,WORK+970
  RMB   11,0    ; CASE 1,3
  FDB   WORK+154,WORK+1072,WORK+1531,WORK+1990
  FDB   WORK+2449,WORK+2908,WORK+3367,WORK+3826
  FDB   WORK+460,WORK+511,WORK+562,WORK+664
  FDB   WORK+715,WORK+766,WORK+817,WORK+868
  FDB   WORK+205,WORK+256,WORK+1123,WORK+1174
  RMB   11,0    ; CASE 1,4
  FDB   WORK+205,WORK+1123,WORK+1582,WORK+2041
  FDB   WORK+2500,WORK+2959,WORK+3418,WORK+3877
  FDB   WORK+460,WORK+511,WORK+562,WORK+613
  FDB   WORK+715,WORK+766,WORK+817,WORK+868
  FDB   WORK+154,WORK+256,WORK+1072,WORK+1174
  RMB   11,0    ; CASE 1,5
  FDB   WORK+256,WORK+1174,WORK+1633,WORK+2092
  FDB   WORK+2551,WORK+3010,WORK+3469,WORK+3928
  FDB   WORK+460,WORK+511,WORK+562,WORK+613
  FDB   WORK+664,WORK+766,WORK+817,WORK+868
  FDB   WORK+154,WORK+205,WORK+1072,WORK+1123
  RMB   11,0    ; CASE 1,6
  FDB   WORK+307,WORK+1225,WORK+1684,WORK+2143
  FDB   WORK+2602,WORK+3061,WORK+3520,WORK+3979
  FDB   WORK+460,WORK+511,WORK+562,WORK+613
  FDB   WORK+664,WORK+715,WORK+817,WORK+868
  FDB   WORK+358,WORK+409,WORK+1276,WORK+1327
  RMB   11,0    ; CASE 1,7
  FDB   WORK+358,WORK+1276,WORK+1735,WORK+2194
  FDB   WORK+2653,WORK+3112,WORK+3571,WORK+4030
  FDB   WORK+460,WORK+511,WORK+562,WORK+613
  FDB   WORK+664,WORK+715,WORK+766,WORK+868
  FDB   WORK+307,WORK+409,WORK+1225,WORK+1327
  RMB   11,0    ; CASE 1,8
  FDB   WORK+409,WORK+1327,WORK+1786,WORK+2245
  FDB   WORK+2704,WORK+3163,WORK+3622,WORK+4081
  FDB   WORK+460,WORK+511,WORK+562,WORK+613
  FDB   WORK+664,WORK+715,WORK+766,WORK+817
  FDB   WORK+307,WORK+358,WORK+1225,WORK+1276
  RMB   11,0    ; CASE 2,0
  FDB   WORK+1,WORK+460,WORK+1378,WORK+1837
  FDB   WORK+2296,WORK+2755,WORK+3214,WORK+3673
  FDB   WORK+970,WORK+1021,WORK+1072,WORK+1123
  FDB   WORK+1174,WORK+1225,WORK+1276,WORK+1327
  FDB   WORK+52,WORK+103,WORK+511,WORK+562
  RMB   11,0    ; CASE 2,1
  FDB   WORK+52,WORK+511,WORK+1429,WORK+1888
  FDB   WORK+2347,WORK+2806,WORK+3265,WORK+3724
  FDB   WORK+919,WORK+1021,WORK+1072,WORK+1123
  FDB   WORK+1174,WORK+1225,WORK+1276,WORK+1327
  FDB   WORK+1,WORK+103,WORK+460,WORK+562
  RMB   11,0    ; CASE 2,2
  FDB   WORK+103,WORK+562,WORK+1480,WORK+1939
  FDB   WORK+2398,WORK+2857,WORK+3316,WORK+3775
  FDB   WORK+919,WORK+970,WORK+1072,WORK+1123
  FDB   WORK+1174,WORK+1225,WORK+1276,WORK+1327
  FDB   WORK+1,WORK+52,WORK+460,WORK+511
  RMB   11,0    ; CASE 2,3
  FDB   WORK+154,WORK+613,WORK+1531,WORK+1990
  FDB   WORK+2449,WORK+2908,WORK+3367,WORK+3826
  FDB   WORK+919,WORK+970,WORK+1021,WORK+1123
  FDB   WORK+1174,WORK+1225,WORK+1276,WORK+1327
  FDB   WORK+205,WORK+256,WORK+664,WORK+715
  RMB   11,0    ; CASE 2,4
  FDB   WORK+205,WORK+664,WORK+1582,WORK+2041
  FDB   WORK+2500,WORK+2959,WORK+3418,WORK+3877
  FDB   WORK+919,WORK+970,WORK+1021,WORK+1072
  FDB   WORK+1174,WORK+1225,WORK+1276,WORK+1327
  FDB   WORK+154,WORK+256,WORK+613,WORK+715
  RMB   11,0    ; CASE 2,5
  FDB   WORK+256,WORK+715,WORK+1633,WORK+2092
  FDB   WORK+2551,WORK+3010,WORK+3469,WORK+3928
  FDB   WORK+919,WORK+970,WORK+1021,WORK+1072
  FDB   WORK+1123,WORK+1225,WORK+1276,WORK+1327
  FDB   WORK+154,WORK+205,WORK+613,WORK+664
  RMB   11,0    ; CASE 2,6
  FDB   WORK+307,WORK+766,WORK+1684,WORK+2143
  FDB   WORK+2602,WORK+3061,WORK+3520,WORK+3979
  FDB   WORK+919,WORK+970,WORK+1021,WORK+1072
  FDB   WORK+1123,WORK+1174,WORK+1276,WORK+1327
  FDB   WORK+358,WORK+409,WORK+817,WORK+868
  RMB   11,0    ; CASE 2,7
  FDB   WORK+358,WORK+817,WORK+1735,WORK+2194
  FDB   WORK+2653,WORK+3112,WORK+3571,WORK+4030
  FDB   WORK+919,WORK+970,WORK+1021,WORK+1072
  FDB   WORK+1123,WORK+1174,WORK+1225,WORK+1327
  FDB   WORK+307,WORK+409,WORK+766,WORK+868
  RMB   11,0    ; CASE 2,8
  FDB   WORK+409,WORK+868,WORK+1786,WORK+2245
  FDB   WORK+2704,WORK+3163,WORK+3622,WORK+4081
  FDB   WORK+919,WORK+970,WORK+1021,WORK+1072
  FDB   WORK+1123,WORK+1174,WORK+1225,WORK+1276
  FDB   WORK+307,WORK+358,WORK+766,WORK+817
  RMB   11,0    ; CASE 3,0
  FDB   WORK+1,WORK+460,WORK+919,WORK+1837
  FDB   WORK+2296,WORK+2755,WORK+3214,WORK+3673
  FDB   WORK+1429,WORK+1480,WORK+1531,WORK+1582
  FDB   WORK+1633,WORK+1684,WORK+1735,WORK+1786
  FDB   WORK+1888,WORK+1939,WORK+2347,WORK+2398
  RMB   11,0    ; CASE 3,1
  FDB   WORK+52,WORK+511,WORK+970,WORK+1888
  FDB   WORK+2347,WORK+2806,WORK+3265,WORK+3724
  FDB   WORK+1378,WORK+1480,WORK+1531,WORK+1582
  FDB   WORK+1633,WORK+1684,WORK+1735,WORK+1786
  FDB   WORK+1837,WORK+1939,WORK+2296,WORK+2398
  RMB   11,0    ; CASE 3,2
  FDB   WORK+103,WORK+562,WORK+1021,WORK+1939
  FDB   WORK+2398,WORK+2857,WORK+3316,WORK+3775
  FDB   WORK+1378,WORK+1429,WORK+1531,WORK+1582
  FDB   WORK+1633,WORK+1684,WORK+1735,WORK+1786
  FDB   WORK+1837,WORK+1888,WORK+2296,WORK+2347
  RMB   11,0    ; CASE 3,3
  FDB   WORK+154,WORK+613,WORK+1072,WORK+1990
  FDB   WORK+2449,WORK+2908,WORK+3367,WORK+3826
  FDB   WORK+1378,WORK+1429,WORK+1480,WORK+1582
  FDB   WORK+1633,WORK+1684,WORK+1735,WORK+1786
  FDB   WORK+2041,WORK+2092,WORK+2500,WORK+2551
  RMB   11,0    ; CASE 3,4
  FDB   WORK+205,WORK+664,WORK+1123,WORK+2041
  FDB   WORK+2500,WORK+2959,WORK+3418,WORK+3877
  FDB   WORK+1378,WORK+1429,WORK+1480,WORK+1531
  FDB   WORK+1633,WORK+1684,WORK+1735,WORK+1786
  FDB   WORK+1990,WORK+2092,WORK+2449,WORK+2551
  RMB   11,0    ; CASE 3,5
  FDB   WORK+256,WORK+715,WORK+1174,WORK+2092
  FDB   WORK+2551,WORK+3010,WORK+3469,WORK+3928
  FDB   WORK+1378,WORK+1429,WORK+1480,WORK+1531
  FDB   WORK+1582,WORK+1684,WORK+1735,WORK+1786
  FDB   WORK+1990,WORK+2041,WORK+2449,WORK+2500
  RMB   11,0    ; CASE 3,6
  FDB   WORK+307,WORK+766,WORK+1225,WORK+2143
  FDB   WORK+2602,WORK+3061,WORK+3520,WORK+3979
  FDB   WORK+1378,WORK+1429,WORK+1480,WORK+1531
  FDB   WORK+1582,WORK+1633,WORK+1735,WORK+1786
  FDB   WORK+2194,WORK+2245,WORK+2653,WORK+2704
  RMB   11,0    ; CASE 3,7
  FDB   WORK+358,WORK+817,WORK+1276,WORK+2194
  FDB   WORK+2653,WORK+3112,WORK+3571,WORK+4030
  FDB   WORK+1378,WORK+1429,WORK+1480,WORK+1531
  FDB   WORK+1582,WORK+1633,WORK+1684,WORK+1786
  FDB   WORK+2143,WORK+2245,WORK+2602,WORK+2704
  RMB   11,0    ; CASE 3,8
  FDB   WORK+409,WORK+868,WORK+1327,WORK+2245
  FDB   WORK+2704,WORK+3163,WORK+3622,WORK+4081
  FDB   WORK+1378,WORK+1429,WORK+1480,WORK+1531
  FDB   WORK+1582,WORK+1633,WORK+1684,WORK+1735
  FDB   WORK+2143,WORK+2194,WORK+2602,WORK+2653
  RMB   11,0    ; CASE 4,0
  FDB   WORK+1,WORK+460,WORK+919,WORK+1378
  FDB   WORK+2296,WORK+2755,WORK+3214,WORK+3673
  FDB   WORK+1888,WORK+1939,WORK+1990,WORK+2041
  FDB   WORK+2092,WORK+2143,WORK+2194,WORK+2245
  FDB   WORK+1429,WORK+1480,WORK+2347,WORK+2398
  RMB   11,0    ; CASE 4,1
  FDB   WORK+52,WORK+511,WORK+970,WORK+1429
  FDB   WORK+2347,WORK+2806,WORK+3265,WORK+3724
  FDB   WORK+1837,WORK+1939,WORK+1990,WORK+2041
  FDB   WORK+2092,WORK+2143,WORK+2194,WORK+2245
  FDB   WORK+1378,WORK+1480,WORK+2296,WORK+2398
  RMB   11,0    ; CASE 4,2
  FDB   WORK+103,WORK+562,WORK+1021,WORK+1480
  FDB   WORK+2398,WORK+2857,WORK+3316,WORK+3775
  FDB   WORK+1837,WORK+1888,WORK+1990,WORK+2041
  FDB   WORK+2092,WORK+2143,WORK+2194,WORK+2245
  FDB   WORK+1378,WORK+1429,WORK+2296,WORK+2347
  RMB   11,0    ; CASE 4,3
  FDB   WORK+154,WORK+613,WORK+1072,WORK+1531
  FDB   WORK+2449,WORK+2908,WORK+3367,WORK+3826
  FDB   WORK+1837,WORK+1888,WORK+1939,WORK+2041
  FDB   WORK+2092,WORK+2143,WORK+2194,WORK+2245
  FDB   WORK+1582,WORK+1633,WORK+2500,WORK+2551
  RMB   11,0    ; CASE 4,4
  FDB   WORK+205,WORK+664,WORK+1123,WORK+1582
  FDB   WORK+2500,WORK+2959,WORK+3418,WORK+3877
  FDB   WORK+1837,WORK+1888,WORK+1939,WORK+1990
  FDB   WORK+2092,WORK+2143,WORK+2194,WORK+2245
  FDB   WORK+1531,WORK+1633,WORK+2449,WORK+2551
  RMB   11,0    ; CASE 4,5
  FDB   WORK+256,WORK+715,WORK+1174,WORK+1633
  FDB   WORK+2551,WORK+3010,WORK+3469,WORK+3928
  FDB   WORK+1837,WORK+1888,WORK+1939,WORK+1990
  FDB   WORK+2041,WORK+2143,WORK+2194,WORK+2245
  FDB   WORK+1531,WORK+1582,WORK+2449,WORK+2500
  RMB   11,0    ; CASE 4,6
  FDB   WORK+307,WORK+766,WORK+1225,WORK+1684
  FDB   WORK+2602,WORK+3061,WORK+3520,WORK+3979
  FDB   WORK+1837,WORK+1888,WORK+1939,WORK+1990
  FDB   WORK+2041,WORK+2092,WORK+2194,WORK+2245
  FDB   WORK+1735,WORK+1786,WORK+2653,WORK+2704
  RMB   11,0    ; CASE 4,7
  FDB   WORK+358,WORK+817,WORK+1276,WORK+1735
  FDB   WORK+2653,WORK+3112,WORK+3571,WORK+4030
  FDB   WORK+1837,WORK+1888,WORK+1939,WORK+1990
  FDB   WORK+2041,WORK+2092,WORK+2143,WORK+2245
  FDB   WORK+1684,WORK+1786,WORK+2602,WORK+2704
  RMB   11,0    ; CASE 4,8
  FDB   WORK+409,WORK+868,WORK+1327,WORK+1786
  FDB   WORK+2704,WORK+3163,WORK+3622,WORK+4081
  FDB   WORK+1837,WORK+1888,WORK+1939,WORK+1990
  FDB   WORK+2041,WORK+2092,WORK+2143,WORK+2194
  FDB   WORK+1684,WORK+1735,WORK+2602,WORK+2653
  RMB   11,0    ; CASE 5,0
  FDB   WORK+1,WORK+460,WORK+919,WORK+1378
  FDB   WORK+1837,WORK+2755,WORK+3214,WORK+3673
  FDB   WORK+2347,WORK+2398,WORK+2449,WORK+2500
  FDB   WORK+2551,WORK+2602,WORK+2653,WORK+2704
  FDB   WORK+1429,WORK+1480,WORK+1888,WORK+1939
  RMB   11,0    ; CASE 5,1
  FDB   WORK+52,WORK+511,WORK+970,WORK+1429
  FDB   WORK+1888,WORK+2806,WORK+3265,WORK+3724
  FDB   WORK+2296,WORK+2398,WORK+2449,WORK+2500
  FDB   WORK+2551,WORK+2602,WORK+2653,WORK+2704
  FDB   WORK+1378,WORK+1480,WORK+1837,WORK+1939
  RMB   11,0    ; CASE 5,2
  FDB   WORK+103,WORK+562,WORK+1021,WORK+1480
  FDB   WORK+1939,WORK+2857,WORK+3316,WORK+3775
  FDB   WORK+2296,WORK+2347,WORK+2449,WORK+2500
  FDB   WORK+2551,WORK+2602,WORK+2653,WORK+2704
  FDB   WORK+1378,WORK+1429,WORK+1837,WORK+1888
  RMB   11,0    ; CASE 5,3
  FDB   WORK+154,WORK+613,WORK+1072,WORK+1531
  FDB   WORK+1990,WORK+2908,WORK+3367,WORK+3826
  FDB   WORK+2296,WORK+2347,WORK+2398,WORK+2500
  FDB   WORK+2551,WORK+2602,WORK+2653,WORK+2704
  FDB   WORK+1582,WORK+1633,WORK+2041,WORK+2092
  RMB   11,0    ; CASE 5,4
  FDB   WORK+205,WORK+664,WORK+1123,WORK+1582
  FDB   WORK+2041,WORK+2959,WORK+3418,WORK+3877
  FDB   WORK+2296,WORK+2347,WORK+2398,WORK+2449
  FDB   WORK+2551,WORK+2602,WORK+2653,WORK+2704
  FDB   WORK+1531,WORK+1633,WORK+1990,WORK+2092
  RMB   11,0    ; CASE 5,5
  FDB   WORK+256,WORK+715,WORK+1174,WORK+1633
  FDB   WORK+2092,WORK+3010,WORK+3469,WORK+3928
  FDB   WORK+2296,WORK+2347,WORK+2398,WORK+2449
  FDB   WORK+2500,WORK+2602,WORK+2653,WORK+2704
  FDB   WORK+1531,WORK+1582,WORK+1990,WORK+2041
  RMB   11,0    ; CASE 5,6
  FDB   WORK+307,WORK+766,WORK+1225,WORK+1684
  FDB   WORK+2143,WORK+3061,WORK+3520,WORK+3979
  FDB   WORK+2296,WORK+2347,WORK+2398,WORK+2449
  FDB   WORK+2500,WORK+2551,WORK+2653,WORK+2704
  FDB   WORK+1735,WORK+1786,WORK+2194,WORK+2245
  RMB   11,0    ; CASE 5,7
  FDB   WORK+358,WORK+817,WORK+1276,WORK+1735
  FDB   WORK+2194,WORK+3112,WORK+3571,WORK+4030
  FDB   WORK+2296,WORK+2347,WORK+2398,WORK+2449
  FDB   WORK+2500,WORK+2551,WORK+2602,WORK+2704
  FDB   WORK+1684,WORK+1786,WORK+2143,WORK+2245
  RMB   11,0    ; CASE 5,8
  FDB   WORK+409,WORK+868,WORK+1327,WORK+1786
  FDB   WORK+2245,WORK+3163,WORK+3622,WORK+4081
  FDB   WORK+2296,WORK+2347,WORK+2398,WORK+2449
  FDB   WORK+2500,WORK+2551,WORK+2602,WORK+2653
  FDB   WORK+1684,WORK+1735,WORK+2143,WORK+2194
  RMB   11,0    ; CASE 6,0
  FDB   WORK+1,WORK+460,WORK+919,WORK+1378
  FDB   WORK+1837,WORK+2296,WORK+3214,WORK+3673
  FDB   WORK+2806,WORK+2857,WORK+2908,WORK+2959
  FDB   WORK+3010,WORK+3061,WORK+3112,WORK+3163
  FDB   WORK+3265,WORK+3316,WORK+3724,WORK+3775
  RMB   11,0    ; CASE 6,1
  FDB   WORK+52,WORK+511,WORK+970,WORK+1429
  FDB   WORK+1888,WORK+2347,WORK+3265,WORK+3724
  FDB   WORK+2755,WORK+2857,WORK+2908,WORK+2959
  FDB   WORK+3010,WORK+3061,WORK+3112,WORK+3163
  FDB   WORK+3214,WORK+3316,WORK+3673,WORK+3775
  RMB   11,0    ; CASE 6,2
  FDB   WORK+103,WORK+562,WORK+1021,WORK+1480
  FDB   WORK+1939,WORK+2398,WORK+3316,WORK+3775
  FDB   WORK+2755,WORK+2806,WORK+2908,WORK+2959
  FDB   WORK+3010,WORK+3061,WORK+3112,WORK+3163
  FDB   WORK+3214,WORK+3265,WORK+3673,WORK+3724
  RMB   11,0    ; CASE 6,3
  FDB   WORK+154,WORK+613,WORK+1072,WORK+1531
  FDB   WORK+1990,WORK+2449,WORK+3367,WORK+3826
  FDB   WORK+2755,WORK+2806,WORK+2857,WORK+2959
  FDB   WORK+3010,WORK+3061,WORK+3112,WORK+3163
  FDB   WORK+3418,WORK+3469,WORK+3877,WORK+3928
  RMB   11,0    ; CASE 6,4
  FDB   WORK+205,WORK+664,WORK+1123,WORK+1582
  FDB   WORK+2041,WORK+2500,WORK+3418,WORK+3877
  FDB   WORK+2755,WORK+2806,WORK+2857,WORK+2908
  FDB   WORK+3010,WORK+3061,WORK+3112,WORK+3163
  FDB   WORK+3367,WORK+3469,WORK+3826,WORK+3928
  RMB   11,0    ; CASE 6,5
  FDB   WORK+256,WORK+715,WORK+1174,WORK+1633
  FDB   WORK+2092,WORK+2551,WORK+3469,WORK+3928
  FDB   WORK+2755,WORK+2806,WORK+2857,WORK+2908
  FDB   WORK+2959,WORK+3061,WORK+3112,WORK+3163
  FDB   WORK+3367,WORK+3418,WORK+3826,WORK+3877
  RMB   11,0    ; CASE 6,6
  FDB   WORK+307,WORK+766,WORK+1225,WORK+1684
  FDB   WORK+2143,WORK+2602,WORK+3520,WORK+3979
  FDB   WORK+2755,WORK+2806,WORK+2857,WORK+2908
  FDB   WORK+2959,WORK+3010,WORK+3112,WORK+3163
  FDB   WORK+3571,WORK+3622,WORK+4030,WORK+4081
  RMB   11,0    ; CASE 6,7
  FDB   WORK+358,WORK+817,WORK+1276,WORK+1735
  FDB   WORK+2194,WORK+2653,WORK+3571,WORK+4030
  FDB   WORK+2755,WORK+2806,WORK+2857,WORK+2908
  FDB   WORK+2959,WORK+3010,WORK+3061,WORK+3163
  FDB   WORK+3520,WORK+3622,WORK+3979,WORK+4081
  RMB   11,0    ; CASE 6,8
  FDB   WORK+409,WORK+868,WORK+1327,WORK+1786
  FDB   WORK+2245,WORK+2704,WORK+3622,WORK+4081
  FDB   WORK+2755,WORK+2806,WORK+2857,WORK+2908
  FDB   WORK+2959,WORK+3010,WORK+3061,WORK+3112
  FDB   WORK+3520,WORK+3571,WORK+3979,WORK+4030
  RMB   11,0    ; CASE 7,0
  FDB   WORK+1,WORK+460,WORK+919,WORK+1378
  FDB   WORK+1837,WORK+2296,WORK+2755,WORK+3673
  FDB   WORK+3265,WORK+3316,WORK+3367,WORK+3418
  FDB   WORK+3469,WORK+3520,WORK+3571,WORK+3622
  FDB   WORK+2806,WORK+2857,WORK+3724,WORK+3775
  RMB   11,0    ; CASE 7,1
  FDB   WORK+52,WORK+511,WORK+970,WORK+1429
  FDB   WORK+1888,WORK+2347,WORK+2806,WORK+3724
  FDB   WORK+3214,WORK+3316,WORK+3367,WORK+3418
  FDB   WORK+3469,WORK+3520,WORK+3571,WORK+3622
  FDB   WORK+2755,WORK+2857,WORK+3673,WORK+3775
  RMB   11,0    ; CASE 7,2
  FDB   WORK+103,WORK+562,WORK+1021,WORK+1480
  FDB   WORK+1939,WORK+2398,WORK+2857,WORK+3775
  FDB   WORK+3214,WORK+3265,WORK+3367,WORK+3418
  FDB   WORK+3469,WORK+3520,WORK+3571,WORK+3622
  FDB   WORK+2755,WORK+2806,WORK+3673,WORK+3724
  RMB   11,0    ; CASE 7,3
  FDB   WORK+154,WORK+613,WORK+1072,WORK+1531
  FDB   WORK+1990,WORK+2449,WORK+2908,WORK+3826
  FDB   WORK+3214,WORK+3265,WORK+3316,WORK+3418
  FDB   WORK+3469,WORK+3520,WORK+3571,WORK+3622
  FDB   WORK+2959,WORK+3010,WORK+3877,WORK+3928
  RMB   11,0    ; CASE 7,4
  FDB   WORK+205,WORK+664,WORK+1123,WORK+1582
  FDB   WORK+2041,WORK+2500,WORK+2959,WORK+3877
  FDB   WORK+3214,WORK+3265,WORK+3316,WORK+3367
  FDB   WORK+3469,WORK+3520,WORK+3571,WORK+3622
  FDB   WORK+2908,WORK+3010,WORK+3826,WORK+3928
  RMB   11,0    ; CASE 7,5
  FDB   WORK+256,WORK+715,WORK+1174,WORK+1633
  FDB   WORK+2092,WORK+2551,WORK+3010,WORK+3928
  FDB   WORK+3214,WORK+3265,WORK+3316,WORK+3367
  FDB   WORK+3418,WORK+3520,WORK+3571,WORK+3622
  FDB   WORK+2908,WORK+2959,WORK+3826,WORK+3877
  RMB   11,0    ; CASE 7,6
  FDB   WORK+307,WORK+766,WORK+1225,WORK+1684
  FDB   WORK+2143,WORK+2602,WORK+3061,WORK+3979
  FDB   WORK+3214,WORK+3265,WORK+3316,WORK+3367
  FDB   WORK+3418,WORK+3469,WORK+3571,WORK+3622
  FDB   WORK+3112,WORK+3163,WORK+4030,WORK+4081
  RMB   11,0    ; CASE 7,7
  FDB   WORK+358,WORK+817,WORK+1276,WORK+1735
  FDB   WORK+2194,WORK+2653,WORK+3112,WORK+4030
  FDB   WORK+3214,WORK+3265,WORK+3316,WORK+3367
  FDB   WORK+3418,WORK+3469,WORK+3520,WORK+3622
  FDB   WORK+3061,WORK+3163,WORK+3979,WORK+4081
  RMB   11,0    ; CASE 7,8
  FDB   WORK+409,WORK+868,WORK+1327,WORK+1786
  FDB   WORK+2245,WORK+2704,WORK+3163,WORK+4081
  FDB   WORK+3214,WORK+3265,WORK+3316,WORK+3367
  FDB   WORK+3418,WORK+3469,WORK+3520,WORK+3571
  FDB   WORK+3061,WORK+3112,WORK+3979,WORK+4030
  RMB   11,0    ; CASE 8,0
  FDB   WORK+1,WORK+460,WORK+919,WORK+1378
  FDB   WORK+1837,WORK+2296,WORK+2755,WORK+3214
  FDB   WORK+3724,WORK+3775,WORK+3826,WORK+3877
  FDB   WORK+3928,WORK+3979,WORK+4030,WORK+4081
  FDB   WORK+2806,WORK+2857,WORK+3265,WORK+3316
  RMB   11,0    ; CASE 8,1
  FDB   WORK+52,WORK+511,WORK+970,WORK+1429
  FDB   WORK+1888,WORK+2347,WORK+2806,WORK+3265
  FDB   WORK+3673,WORK+3775,WORK+3826,WORK+3877
  FDB   WORK+3928,WORK+3979,WORK+4030,WORK+4081
  FDB   WORK+2755,WORK+2857,WORK+3214,WORK+3316
  RMB   11,0    ; CASE 8,2
  FDB   WORK+103,WORK+562,WORK+1021,WORK+1480
  FDB   WORK+1939,WORK+2398,WORK+2857,WORK+3316
  FDB   WORK+3673,WORK+3724,WORK+3826,WORK+3877
  FDB   WORK+3928,WORK+3979,WORK+4030,WORK+4081
  FDB   WORK+2755,WORK+2806,WORK+3214,WORK+3265
  RMB   11,0    ; CASE 8,3
  FDB   WORK+154,WORK+613,WORK+1072,WORK+1531
  FDB   WORK+1990,WORK+2449,WORK+2908,WORK+3367
  FDB   WORK+3673,WORK+3724,WORK+3775,WORK+3877
  FDB   WORK+3928,WORK+3979,WORK+4030,WORK+4081
  FDB   WORK+2959,WORK+3010,WORK+3418,WORK+3469
  RMB   11,0    ; CASE 8,4
  FDB   WORK+205,WORK+664,WORK+1123,WORK+1582
  FDB   WORK+2041,WORK+2500,WORK+2959,WORK+3418
  FDB   WORK+3673,WORK+3724,WORK+3775,WORK+3826
  FDB   WORK+3928,WORK+3979,WORK+4030,WORK+4081
  FDB   WORK+2908,WORK+3010,WORK+3367,WORK+3469
  RMB   11,0    ; CASE 8,5
  FDB   WORK+256,WORK+715,WORK+1174,WORK+1633
  FDB   WORK+2092,WORK+2551,WORK+3010,WORK+3469
  FDB   WORK+3673,WORK+3724,WORK+3775,WORK+3826
  FDB   WORK+3877,WORK+3979,WORK+4030,WORK+4081
  FDB   WORK+2908,WORK+2959,WORK+3367,WORK+3418
  RMB   11,0    ; CASE 8,6
  FDB   WORK+307,WORK+766,WORK+1225,WORK+1684
  FDB   WORK+2143,WORK+2602,WORK+3061,WORK+3520
  FDB   WORK+3673,WORK+3724,WORK+3775,WORK+3826
  FDB   WORK+3877,WORK+3928,WORK+4030,WORK+4081
  FDB   WORK+3112,WORK+3163,WORK+3571,WORK+3622
  RMB   11,0    ; CASE 8,7
  FDB   WORK+358,WORK+817,WORK+1276,WORK+1735
  FDB   WORK+2194,WORK+2653,WORK+3112,WORK+3571
  FDB   WORK+3673,WORK+3724,WORK+3775,WORK+3826
  FDB   WORK+3877,WORK+3928,WORK+3979,WORK+4081
  FDB   WORK+3061,WORK+3163,WORK+3520,WORK+3622
  RMB   11,0    ; CASE 8,8
  FDB   WORK+409,WORK+868,WORK+1327,WORK+1786
  FDB   WORK+2245,WORK+2704,WORK+3163,WORK+3622
  FDB   WORK+3673,WORK+3724,WORK+3775,WORK+3826
  FDB   WORK+3877,WORK+3928,WORK+3979,WORK+4030
  FDB   WORK+3061,WORK+3112,WORK+3520,WORK+3571
  FDB   -1      ; sentinel

***************************************
* Notre propre pile car celle en place
* n'est peut-etre pas assez grosse.
***************************************
STACKEND
  BRN   STACKEND
  RMB   81*5+64*2,0
STACKTOP
***************************************
* Quelques infos
***************************************
  ECHO  START        = $INI
  ECHO  SOLVE        = $SOLVE
  ECHO  Debug Solv   = &DEBUG
  ECHO  Debug Gener  = &DBGEN
  ECHO  Taille Algo  = &RND-SOLVE
  ECHO  Taille Work  = &STACKEND-WORK
  ECHO  Taille Stack = &STACKTOP-STACKEND bytes

  END   INI

/
 (* structure de donnee *)
 WORK : ARRAY 1..81 OF CASE 

 CASE = RECORD
         chiffre     : BYTE; (* chiffre present dans la case *)
         nbzero      : BYTE (* nombre de utilises[x]==0 *)
         utilises    : ARRAY 1..9 OF BYTE; (* chiffre utilises par les cases de la meme ligne/colone/bloc *)
         contraintes : ARRAY 1..20 of BYTE (* indices precalcules des autres cases de la même ligne/colone/bloc *)
      END

 (* PLACE LE CHIFFRE "A" (0..9) DANS LA CASE "U" *)
 (* TOUT EN MAINTENANT la coherence de la structure *)
 PROCEDURE PUTDIGIT(A,U)
    LOCAL PROCEDURE CLRDGT(U)
        B = WORK[U].chiffre
        IF B!=0 then
            WORK[U].chiffre=0
            FOR i=1..20 DO
                j = WORK[U].contraintes[i]
                DEC WORK[j].utilises[B]
                IF WORK[j].utilises[B]==0 then
                    INC WORK[j].nbzero
                END
            END
        END
    END
    LOCAL PROCEDURE PUTDGT(A,U)
        WORK[U].chiffre = A
        FOR i=1..20 DO
            j = WORK[u].contraintes[i]
            IF WORK[j].utilises[A]==0 then
                DEC WORK[j].nbzero
            END
            INC WORK[j].utilises[A]
        END
    END
    (* === *)
    IF A==0 THEN
        CLRDIGIT(U)
    ELSE
        IF WORK[u].chiffre!=0 THEN
            CLRDGIT(U)
        END
        PUTDGT(A,U)
    END
 END

 (* POINT D'ENTREE DE LA RESOLUTION *)
 FUNCTION SOLVE(SUDOKU : ARRAY 1..81 OF BYTE)
    FOR i=1..81 DO
        WORK[i].nbzero = 9
        FOR j=1..9 DO
            WORK[i].utilises[j] = 0
        END
    END
    FOR i=1..81 DO
        PUTDIGIT(SUDOKU[i], i)
    END
    RETURN RECURSE()
 END

 (* RECHERCHE RECURSIVEMENT UNE SOLUTION *)
 FUNCTION BOOLEAN RECURSE()
    LOCAL cpy : ARRAY 1..9 of BIT (* s'optimise dans un bitmask sur 8 bits si on est malin *)
    LOCAL i : BYTE (* espace d'etat conserve' d'un appel a` l'autre = cpy + i = 2 octets seulement *)

    max = 10
    idx = 0
    FOR i=1..81 DO
        IF WORK[i].nbzero<max THEN
            max = WORK[i].nbzero
            idx = i
        END
    END
    IF max==10 THEN
        (* GRILLE PLEINE ! TERMINE *)
        AFFICHE_SUDOKU()
        RETURN TRUE
    END

    FOR i=1..9 DO
        cpy[i] = WORK[idx].utilises[i]==0  (* copie locale pour recursion *)
    END
    FOR i=1..9 DO
        IF cpy[i]==0 THEN       (* chiffre 'i' pas utilise *)
            PUTDIGIT(i, idx)    (* on place 'i' dans la case "U" *)
            ok = RECURSE()
            PUTDIGIT(0, idx)
            IF ok THEN
                RETURN TRUE
            END
        END
    END
    (* ON A TOUT EPUISE SANS TROUVER *)
    RETURN FALSE
 END
/