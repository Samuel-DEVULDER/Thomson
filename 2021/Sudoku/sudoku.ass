(main)SUDOKU

DEBUG SET 1
GRID  SET 1
RAND  SET 0

  ORG   $A000
  BRA   INI

***************************************
* Le sudoku a resoudre
***************************************
SUDOKU
  IFEQ  GRID-1
  FCC   "000000001"
  FCC   "210000904"
  FCC   "403500600"
  FCC   "900204500"
  FCC   "002705800"
  FCC   "001608003"
  FCC   "004007309"
  FCC   "709000068"
  FCC   "100000000"
  ENDC
  IFEQ  GRID-17
  FCC   "000000010"
  FCC   "000002003"
  FCC   "000400000"
  FCC   "000000500"
  FCC   "401600000"
  FCC   "007100000"
  FCC   "050000200"
  FCC   "000080040"
  FCC   "030910000"
  ENDC

***************************************
* Point d'entree
***************************************
INI
  PSHS  D,X,Y,U,CC,DP
  STS   BAKS-2
  LDS   #STACKTOP

  JSR   PUTS
  FCC   "Input:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0

  JSR   TMRON

  JSR   TOWORK
  LDU   #ONESOL
  JSR   SOLVE
  BEQ   NOSOL

  JSR   TOSUDOKU
  JSR   PUTS
  FCC   "Output:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0
  BRA   EXIT

NOSOL
  BSR   PUTS
  FCC   "No solution!"
  FCB   10,13,0

EXIT
  JSR   TMROFF
  JSR   PUTS
  FCC   "Time: "
  FCB   0
  JSR   TMRPRT
  JSR   PUTS
  FCC   "secs"
  FCB   13,10,0
  LDS   #0000
BAKS
  PULS  D,X,Y,U,CC,DP,PC

***************************************
* Affiche le sudoku
***************************************
AFFICHE
  PSHS  D,X
  LDX   #SUDOKU
  BSR   AFF3S
  BSR   SCROLL
  BSR   AFFIV
  BSR   AFF3L
  BSR   AFFIV
  BSR   AFF3S
  PULS  D,X,PC
* scroll 3 lignes
SCROLL
  BSR   PUTS
  FCB   10,10,10,11,11,11,$80
AFFIV
  BSR   PUTS
  FCB   $1B,$5C,$80
* scroll + 3 ligne
AFF3S
  BSR   SCROLL
* affiche un bloc de 3 lignes
AFF3L
  BSR   AFF1L
  BSR   AFF1L
* affiche une ligne
AFF1L
  BSR   AFF3I
  BSR   AFF3I
  BSR   AFF3I
  BSR   AFFIV
  BSR   PUTS
  FCB   8,8,8
  FCB   8,8,8
  FCB   8,8,8
  FCB   10,$80
* inv vide + 3 char
AFF3I
  BSR   AFFIV
* affiche 3 char
AFF3
  BSR   AFF1
  BSR   AFF1
* affiche 1 char
AFF1
  LDB   ,X+
  CMPB  #'0
  BNE   PUTC
  LDB   #'.
* /!\ passe au travers

***************************************
* affiche un caractere
***************************************
PUTC
  JMP   $E803

***************************************
* affiche une chaine
*
* La chaine suit le code appellant.
* Si la chaine se termine par 0, alors
* on retourne a l'instruction qui suit.
* Si en revanche elle se termine par
* une valeur negative, on poursuit sur
* la routine au dessus.
***************************************
PUTS
  PSHS  B,X
  LDX   3,S
PUTS1
  LDB   ,X+
  BMI   PUTS3
  BEQ   PUTS2
  BSR   PUTC
  BRA   PUTS1
PUTS2
  STX   3,S
  PULS  B,X,PC
PUTS3
  PULS  B,X
  LEAS  2,S
  RTS

***************************************
* Activation timer
***************************************
TIMEPT  EQU   $6027
STATUS  EQU   $6019
TMRON
  PSHS  D
  TFR   CC,A
  ORCC  #$50
  STA   TMRCC+1
  LDD   #0
  STD   TMRDAT
  STD   TMRDAT+2

  LDD   TIMEPT
  STD   TMROLD+1
  LDD   #TMRSVC
  STD   TIMEPT
  LDA   #$20
  ORA   STATUS
  STA   STATUS

  ANDCC #255-$50
  PULS  D,PC

***************************************
* Desactivation timer
***************************************
TMROFF
  PSHS  D
  ORCC  #$50
  LDA   #255-$20
  ANDA  STATUS
  STA   STATUS
TMROLD
  LDD   #0
  STD   TIMEPT
TMRCC
  LDA   #0
  TFR   A,CC
  PULS  D,PC

***************************************
* Affichage timer
***************************************
TMRPRT
  PSHS  X,D,CC
  ORCC  #$50
  LDX   #TMRDAT+4
  LDA   #4
TMRPR1
  LDB   ,-X         ; on empile les
  ANDB  #15         ; 8 digits
  STB   ,-S
  LDB   ,X
  LSRB
  LSRB
  LSRB
  LSRB
  STB   ,-S
  DECA
  BNE   TMRPR1
  LDB   #$80
  ORB   6,S         ; on marque le
  STB   6,S         ; chiffre des unites
TMRPR2
  LDB   ,S+
  BEQ   TMRPR2      ; on saute au dessus des '0'
  BMI   TMRPR4      ; => dernier chiffre
TMRPR3
  BSR   TMRPR5
  LDB   ,S+         ; suivant
  BPL   TMRPR3
TMRPR4
  ANDB  #$7F        ; l'avant dernier chiffre
  BSR   TMRPR5
  LDB   #'.
  JSR   PUTC
  LDB   ,S+
  BSR   TMRPR5
  PULS  X,D,CC,PC
TMRPR5
  ADDB  #'0
  JMP   PUTC

***************************************
* Interruption timer
***************************************
TMRSVC
  LDX   #TMRDAT+4
  COMA          ; C=1
TMRSV1
  LDA   ,-X     ; le compteur
  ADCA  #0      ; marche directemetnt
  DAA           ; en BCD
  STA   ,X
  BCS   TMRSV1
  JMP   $E830

***************************************
* Donnee Timer
***************************************
TMRDAT
  FDB   0,0

***************************************
* Converti le SUDOKU vers WORK
* (espace dde travail optimise)
***************************************
TOWORK
  PSHS  D,X,Y,U
  LDA   #81
  LDU   #SUDOKU
  LDY   #WORK
TOW1
  LDB   ,U+
  SUBB  #'0
  LSLB
  LDX   #MASKS
  ABX
  LDX   ,X
  STX   ,Y
  LEAY  42,Y
  DECA
  BNE   TOW1
  PULS  D,X,Y,U,PC

***************************************
* Converti le WORK vers SUDOKU
***************************************
TOSUDOKU
  PSHS  D,X,U
  LDX   #SUDOKU
  LDU   #WORK
  LDD   ,U
TOSUD1
  LEAU  42,U
  BSR   MSKDGT
  STA   ,X+
  LDD   ,U
  BGE   TOSUD1
  PULS  D,X,U,PC

***************************************
* Converti un mask en ascci
***************************************
MSKDGT
  TSTA
  BEQ   MSKDG1
  LDA   #'9
  RTS
MSKDG1
  TSTB
  BNE   MSKDG2
  DECA
MSKDG2
  INCA
  LSRB
  BNE   MSKDG2
  ADDA  #'0
  RTS

  RMB   ((*+255)&$FF00)-*,0

***************************************
* Algo de resolution
*
* En entree:
*   U=routine si sol trouvee
*   (retourne Z=1 s'il faut continuer
*   la recherche)
*
* En sortie:
*   Z=1 si allee jusqu'au bout
*       (pas de solution)
*   Z=0 sinon
*       (solution trouvee)
***************************************
SOLVE
  PSHS  DP,X,Y,U
  LDY   #BITCOUNT+128
  SETDP POSCNT<-8
  LDA   #POSCNT<-8
  TFR   A,DP
  STU   <SOLFND+1
  IFNE  DEBUG
  JSR   PUTS
  FCC   "DEBUG:"
  FCB   10,13,32,32,0
  JSR   <DBGPRT
  JSR   PUTS
  FCB   $14,$1B,$68,0
  ENDC
  BSR   SOLV0
  IFNE  DEBUG
  PSHS  CC
  JSR   PUTS
  FCB   $11,$1B,$69,11,13,$18
  FCB   10,$18,10,$18,10,$18,10,$18,10,$18
  FCB   10,$18,10,$18,10,$18,10,$18,10,$18
  FCB   11,11,11,11,11,11,11,11,11,11,0
  PULS  CC
  ENDC
  PULS  DP,X,Y,U,PC

* recherche recursive
SOLV0
  PSHS  B,U

  IFNE  DEBUG
  JSR   <DBGPRT
  ENDC

  LDB   #10       ; majorant
  STB   <POSCNT+1

* recherche une case vide
  LDU   #WORK
SOLV1
  LDD   ,U
  LEAU  42,U
  BGT   SOLV1
  BMI   SOLV4
  LDX   ,--U      ; calcul des chiffres deja utilises
SOLV2
  ORA   ,X        ; c'est un simple or 16 bits
  ORB   1,X
  LDX   ,--U      ; qui se termine quand on revient sur
  BNE   SOLV2     ; la case courante (qui est nulle ==> test gratos)
  EORA  #1        ; on inverse les bits pour trouver
  COMB            ; le mask des chiffres possibles
  STD   <POSMSK+1 ; mask vide ?
  BEQ   SOLVRET   ; oui => termine (pas de soluce)
  ADDA  B,Y       ; nb de bits a 1 (rapide car A=0 ou 1)
POSCNT
  CMPA  #0        ; meilleure ?
  BGT   SOLV3
  IFNE  RAND
  BNE   POSMSK-2
  BSR   RNDBIT 
  BCC   SOLV3
  ENDC
  STA   <POSCNT+1 ; on sauve le nouveau nb de choix
POSMSK
  LDD   #0
  STD   <BSTMSK+1
  STU   <BSTCEL+1 ; et la case actuelle
SOLV3
  LEAU  42,U
  BRA   SOLV1     ; on passe a la case suivante
 
* on a fini de trouver la meilleure case possible
SOLV4
  LDB   <POSCNT+1
  SUBB  #10
  BNE   BSTCEL    ; il y a eu des cases vides ==> on choisit la meilleure

* la grille est pleine: on a trouve
SOLFND
  JSR   >$1234   ; callback pour continuer (Z=1) ou stopper (Z=0)
  PULS  B,U,PC

* recup meilleur mask et meilleur case
BSTCEL
  LDU   #0
BSTMSK
  LDD   #0

* on essaie toute les possibilites
  TSTA            ; chiffre 9 possible ?
  BEQ   SOLV5     ; non ==> on regarde partie basse
  STA   ,U        ; on place 9
  BSR   SOLV0     ; recherche
  BNE   SOLVRET   ; il faut stopper ?
  CLR   ,U        ; non ==> annulation choix
SOLV5
  STB   <MSKLOW+1 ; calcul rapide d'un bit a 1
  NEGB            ; avec la formule (B & -B)
MSKLOW
  ANDB  #0
  STB   1,U       ; on fige ce chiffre dans la case
  BEQ   SOLVRET   ; plus de bits ==> fini (pas solution)
  EORB  <MSKLOW+1 ; effacement du chiffre parmi les possibilites
  BSR   SOLV0     ; recherche avec cette case figee
  BEQ   SOLV5     ; Z=1 => on continue

* PAS TROUVE
SOLVRET
  PULS  B,U,PC

  IFNE  RAND
***************************************
* Sort 1 bit aleatoire (periode=31871)
***************************************
RNDBIT
  LSR   <ENTROP
  BEQ   RNDBI1
  RTS
RNDBI1
  PSHS  D
  LDD   #3*256+249  ; a=249 (ne pas changer, celle la produit une longue pÃ©riode)
	MUL               ; a*x
RNDBI2
  ADDD  #0          ; ax+c
  STB   <RNDBI1+2+1 ; x=(ax+c) % 256
  STA   <RNDBI2+2   ; c=floor((ax+b)/256)
  LSRB
  ORB   #$80
  STB   <ENTROP
  PULS  D,PC
ENTROP
  FCB   0
  ENDC
  
***************************************
* Callback qui stoppe a la 1ere soluce
***************************************
ONESOL
  LDB   #1    ; on retourne Z=0
  RTS

  IFNE  DEBUG
***************************************
* affiche le sudoku pour le debug
***************************************
DBGPRT
  JSR   TOSUDOKU
  JSR   AFFICHE
  JSR   PUTS
  FCB   11,11,11,11,11
  FCB   11,11,11,11,0
  RTS
  ENDC

***************************************
* Conversion chiffre -> masque
***************************************
MASKS
  FDB   %000000000
  FDB   %000000001
  FDB   %000000010
  FDB   %000000100
  FDB   %000001000
  FDB   %000010000
  FDB   %000100000
  FDB   %001000000
  FDB   %010000000
  FDB   %100000000

***************************************
* Tableau indiquant le nb de bits a 1
***************************************
BITCOUNT
/ EXECUTER CE QUI SUIT POUR GENERER
./luajit - <<EOF
for i=-128,127 do
  if (i%16)==0 then
    io.stdout:write('\n  FCB \t')
  elseif i>-128 then
    io.stdout:write(',')
  end
  i,n = (i+256)%256, 0
  while i>0 do
    n,i = n + (i%2), math.floor(i/2)
  end
  io.stdout:write(n)
end
io.stdout:write('\n')
EOF
/
  FCB   1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
  FCB   3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
  FCB   4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8
  FCB   0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4
  FCB   1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
  FCB   1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7

***************************************
* ESPACE DE TRAVAIL
*
* Sructure:
*    81*(case)
*    FDB  -1
* case:
*    FDB  <MASQUE DE CHIFFRE>
*    20*(FDB <ADRESSE CASE INFLUENTES>)
***************************************
WORK
/ EXECUTER POUR GENERER:
reset; ./luajit - <<EOF
long = true
print('WORK')
for i=0,8 do
  for j=0,8 do
    print('  FDB ', '0', '; CASE ' .. i .. ',' ..j)
    t = {}
    for k=0,8 do
      if k~=i then
        if long then
          print('  FDB ', 'WORK+'..((k*9 + j)*42)..'   ', '; '..k..','..j)
        else
          table.insert(t, 'WORK+'..((k*9 + j)*42))
        end
      end
    end
    for k=0,8 do
      if k~=j then
        if long then
          print('  FDB ', 'WORK+'..((i*9 + k)*42)..'   ', '; '..i..','..k)
        else
          table.insert(t, 'WORK+'..((i*9 + k)*42))
        end
      end
    end
    local ii,jj=math.floor(i/3)*3,math.floor(j/3)*3
    for ii=ii,ii+2 do
      for jj=jj,jj+2 do
        if ii~=i and jj~=j then
          if long then
            print('  FDB ', 'WORK+'..((ii*9 + jj)*42)..'   ', '; '..ii..','..jj)
          else
            table.insert(t, 'WORK+'..((ii*9 + jj)*42))
          end
        end
      end
    end
    for i=1,#t,4 do print('  FDB ', t[i]..','..t[i+1]..','..t[i+2]..','..t[i+3]) end t = {}
  end
end
print('  FDB ','-1','; sentinel')
EOF
/
  FDB   0       ; CASE 0,0
  FDB   WORK+378,WORK+756,WORK+1134,WORK+1512
  FDB   WORK+1890,WORK+2268,WORK+2646,WORK+3024
  FDB   WORK+42,WORK+84,WORK+126,WORK+168
  FDB   WORK+210,WORK+252,WORK+294,WORK+336
  FDB   WORK+420,WORK+462,WORK+798,WORK+840
  FDB   0       ; CASE 0,1
  FDB   WORK+420,WORK+798,WORK+1176,WORK+1554
  FDB   WORK+1932,WORK+2310,WORK+2688,WORK+3066
  FDB   WORK+0,WORK+84,WORK+126,WORK+168
  FDB   WORK+210,WORK+252,WORK+294,WORK+336
  FDB   WORK+378,WORK+462,WORK+756,WORK+840
  FDB   0       ; CASE 0,2
  FDB   WORK+462,WORK+840,WORK+1218,WORK+1596
  FDB   WORK+1974,WORK+2352,WORK+2730,WORK+3108
  FDB   WORK+0,WORK+42,WORK+126,WORK+168
  FDB   WORK+210,WORK+252,WORK+294,WORK+336
  FDB   WORK+378,WORK+420,WORK+756,WORK+798
  FDB   0       ; CASE 0,3
  FDB   WORK+504,WORK+882,WORK+1260,WORK+1638
  FDB   WORK+2016,WORK+2394,WORK+2772,WORK+3150
  FDB   WORK+0,WORK+42,WORK+84,WORK+168
  FDB   WORK+210,WORK+252,WORK+294,WORK+336
  FDB   WORK+546,WORK+588,WORK+924,WORK+966
  FDB   0       ; CASE 0,4
  FDB   WORK+546,WORK+924,WORK+1302,WORK+1680
  FDB   WORK+2058,WORK+2436,WORK+2814,WORK+3192
  FDB   WORK+0,WORK+42,WORK+84,WORK+126
  FDB   WORK+210,WORK+252,WORK+294,WORK+336
  FDB   WORK+504,WORK+588,WORK+882,WORK+966
  FDB   0       ; CASE 0,5
  FDB   WORK+588,WORK+966,WORK+1344,WORK+1722
  FDB   WORK+2100,WORK+2478,WORK+2856,WORK+3234
  FDB   WORK+0,WORK+42,WORK+84,WORK+126
  FDB   WORK+168,WORK+252,WORK+294,WORK+336
  FDB   WORK+504,WORK+546,WORK+882,WORK+924
  FDB   0       ; CASE 0,6
  FDB   WORK+630,WORK+1008,WORK+1386,WORK+1764
  FDB   WORK+2142,WORK+2520,WORK+2898,WORK+3276
  FDB   WORK+0,WORK+42,WORK+84,WORK+126
  FDB   WORK+168,WORK+210,WORK+294,WORK+336
  FDB   WORK+672,WORK+714,WORK+1050,WORK+1092
  FDB   0       ; CASE 0,7
  FDB   WORK+672,WORK+1050,WORK+1428,WORK+1806
  FDB   WORK+2184,WORK+2562,WORK+2940,WORK+3318
  FDB   WORK+0,WORK+42,WORK+84,WORK+126
  FDB   WORK+168,WORK+210,WORK+252,WORK+336
  FDB   WORK+630,WORK+714,WORK+1008,WORK+1092
  FDB   0       ; CASE 0,8
  FDB   WORK+714,WORK+1092,WORK+1470,WORK+1848
  FDB   WORK+2226,WORK+2604,WORK+2982,WORK+3360
  FDB   WORK+0,WORK+42,WORK+84,WORK+126
  FDB   WORK+168,WORK+210,WORK+252,WORK+294
  FDB   WORK+630,WORK+672,WORK+1008,WORK+1050
  FDB   0       ; CASE 1,0
  FDB   WORK+0,WORK+756,WORK+1134,WORK+1512
  FDB   WORK+1890,WORK+2268,WORK+2646,WORK+3024
  FDB   WORK+420,WORK+462,WORK+504,WORK+546
  FDB   WORK+588,WORK+630,WORK+672,WORK+714
  FDB   WORK+42,WORK+84,WORK+798,WORK+840
  FDB   0       ; CASE 1,1
  FDB   WORK+42,WORK+798,WORK+1176,WORK+1554
  FDB   WORK+1932,WORK+2310,WORK+2688,WORK+3066
  FDB   WORK+378,WORK+462,WORK+504,WORK+546
  FDB   WORK+588,WORK+630,WORK+672,WORK+714
  FDB   WORK+0,WORK+84,WORK+756,WORK+840
  FDB   0       ; CASE 1,2
  FDB   WORK+84,WORK+840,WORK+1218,WORK+1596
  FDB   WORK+1974,WORK+2352,WORK+2730,WORK+3108
  FDB   WORK+378,WORK+420,WORK+504,WORK+546
  FDB   WORK+588,WORK+630,WORK+672,WORK+714
  FDB   WORK+0,WORK+42,WORK+756,WORK+798
  FDB   0       ; CASE 1,3
  FDB   WORK+126,WORK+882,WORK+1260,WORK+1638
  FDB   WORK+2016,WORK+2394,WORK+2772,WORK+3150
  FDB   WORK+378,WORK+420,WORK+462,WORK+546
  FDB   WORK+588,WORK+630,WORK+672,WORK+714
  FDB   WORK+168,WORK+210,WORK+924,WORK+966
  FDB   0       ; CASE 1,4
  FDB   WORK+168,WORK+924,WORK+1302,WORK+1680
  FDB   WORK+2058,WORK+2436,WORK+2814,WORK+3192
  FDB   WORK+378,WORK+420,WORK+462,WORK+504
  FDB   WORK+588,WORK+630,WORK+672,WORK+714
  FDB   WORK+126,WORK+210,WORK+882,WORK+966
  FDB   0       ; CASE 1,5
  FDB   WORK+210,WORK+966,WORK+1344,WORK+1722
  FDB   WORK+2100,WORK+2478,WORK+2856,WORK+3234
  FDB   WORK+378,WORK+420,WORK+462,WORK+504
  FDB   WORK+546,WORK+630,WORK+672,WORK+714
  FDB   WORK+126,WORK+168,WORK+882,WORK+924
  FDB   0       ; CASE 1,6
  FDB   WORK+252,WORK+1008,WORK+1386,WORK+1764
  FDB   WORK+2142,WORK+2520,WORK+2898,WORK+3276
  FDB   WORK+378,WORK+420,WORK+462,WORK+504
  FDB   WORK+546,WORK+588,WORK+672,WORK+714
  FDB   WORK+294,WORK+336,WORK+1050,WORK+1092
  FDB   0       ; CASE 1,7
  FDB   WORK+294,WORK+1050,WORK+1428,WORK+1806
  FDB   WORK+2184,WORK+2562,WORK+2940,WORK+3318
  FDB   WORK+378,WORK+420,WORK+462,WORK+504
  FDB   WORK+546,WORK+588,WORK+630,WORK+714
  FDB   WORK+252,WORK+336,WORK+1008,WORK+1092
  FDB   0       ; CASE 1,8
  FDB   WORK+336,WORK+1092,WORK+1470,WORK+1848
  FDB   WORK+2226,WORK+2604,WORK+2982,WORK+3360
  FDB   WORK+378,WORK+420,WORK+462,WORK+504
  FDB   WORK+546,WORK+588,WORK+630,WORK+672
  FDB   WORK+252,WORK+294,WORK+1008,WORK+1050
  FDB   0       ; CASE 2,0
  FDB   WORK+0,WORK+378,WORK+1134,WORK+1512
  FDB   WORK+1890,WORK+2268,WORK+2646,WORK+3024
  FDB   WORK+798,WORK+840,WORK+882,WORK+924
  FDB   WORK+966,WORK+1008,WORK+1050,WORK+1092
  FDB   WORK+42,WORK+84,WORK+420,WORK+462
  FDB   0       ; CASE 2,1
  FDB   WORK+42,WORK+420,WORK+1176,WORK+1554
  FDB   WORK+1932,WORK+2310,WORK+2688,WORK+3066
  FDB   WORK+756,WORK+840,WORK+882,WORK+924
  FDB   WORK+966,WORK+1008,WORK+1050,WORK+1092
  FDB   WORK+0,WORK+84,WORK+378,WORK+462
  FDB   0       ; CASE 2,2
  FDB   WORK+84,WORK+462,WORK+1218,WORK+1596
  FDB   WORK+1974,WORK+2352,WORK+2730,WORK+3108
  FDB   WORK+756,WORK+798,WORK+882,WORK+924
  FDB   WORK+966,WORK+1008,WORK+1050,WORK+1092
  FDB   WORK+0,WORK+42,WORK+378,WORK+420
  FDB   0       ; CASE 2,3
  FDB   WORK+126,WORK+504,WORK+1260,WORK+1638
  FDB   WORK+2016,WORK+2394,WORK+2772,WORK+3150
  FDB   WORK+756,WORK+798,WORK+840,WORK+924
  FDB   WORK+966,WORK+1008,WORK+1050,WORK+1092
  FDB   WORK+168,WORK+210,WORK+546,WORK+588
  FDB   0       ; CASE 2,4
  FDB   WORK+168,WORK+546,WORK+1302,WORK+1680
  FDB   WORK+2058,WORK+2436,WORK+2814,WORK+3192
  FDB   WORK+756,WORK+798,WORK+840,WORK+882
  FDB   WORK+966,WORK+1008,WORK+1050,WORK+1092
  FDB   WORK+126,WORK+210,WORK+504,WORK+588
  FDB   0       ; CASE 2,5
  FDB   WORK+210,WORK+588,WORK+1344,WORK+1722
  FDB   WORK+2100,WORK+2478,WORK+2856,WORK+3234
  FDB   WORK+756,WORK+798,WORK+840,WORK+882
  FDB   WORK+924,WORK+1008,WORK+1050,WORK+1092
  FDB   WORK+126,WORK+168,WORK+504,WORK+546
  FDB   0       ; CASE 2,6
  FDB   WORK+252,WORK+630,WORK+1386,WORK+1764
  FDB   WORK+2142,WORK+2520,WORK+2898,WORK+3276
  FDB   WORK+756,WORK+798,WORK+840,WORK+882
  FDB   WORK+924,WORK+966,WORK+1050,WORK+1092
  FDB   WORK+294,WORK+336,WORK+672,WORK+714
  FDB   0       ; CASE 2,7
  FDB   WORK+294,WORK+672,WORK+1428,WORK+1806
  FDB   WORK+2184,WORK+2562,WORK+2940,WORK+3318
  FDB   WORK+756,WORK+798,WORK+840,WORK+882
  FDB   WORK+924,WORK+966,WORK+1008,WORK+1092
  FDB   WORK+252,WORK+336,WORK+630,WORK+714
  FDB   0       ; CASE 2,8
  FDB   WORK+336,WORK+714,WORK+1470,WORK+1848
  FDB   WORK+2226,WORK+2604,WORK+2982,WORK+3360
  FDB   WORK+756,WORK+798,WORK+840,WORK+882
  FDB   WORK+924,WORK+966,WORK+1008,WORK+1050
  FDB   WORK+252,WORK+294,WORK+630,WORK+672
  FDB   0       ; CASE 3,0
  FDB   WORK+0,WORK+378,WORK+756,WORK+1512
  FDB   WORK+1890,WORK+2268,WORK+2646,WORK+3024
  FDB   WORK+1176,WORK+1218,WORK+1260,WORK+1302
  FDB   WORK+1344,WORK+1386,WORK+1428,WORK+1470
  FDB   WORK+1554,WORK+1596,WORK+1932,WORK+1974
  FDB   0       ; CASE 3,1
  FDB   WORK+42,WORK+420,WORK+798,WORK+1554
  FDB   WORK+1932,WORK+2310,WORK+2688,WORK+3066
  FDB   WORK+1134,WORK+1218,WORK+1260,WORK+1302
  FDB   WORK+1344,WORK+1386,WORK+1428,WORK+1470
  FDB   WORK+1512,WORK+1596,WORK+1890,WORK+1974
  FDB   0       ; CASE 3,2
  FDB   WORK+84,WORK+462,WORK+840,WORK+1596
  FDB   WORK+1974,WORK+2352,WORK+2730,WORK+3108
  FDB   WORK+1134,WORK+1176,WORK+1260,WORK+1302
  FDB   WORK+1344,WORK+1386,WORK+1428,WORK+1470
  FDB   WORK+1512,WORK+1554,WORK+1890,WORK+1932
  FDB   0       ; CASE 3,3
  FDB   WORK+126,WORK+504,WORK+882,WORK+1638
  FDB   WORK+2016,WORK+2394,WORK+2772,WORK+3150
  FDB   WORK+1134,WORK+1176,WORK+1218,WORK+1302
  FDB   WORK+1344,WORK+1386,WORK+1428,WORK+1470
  FDB   WORK+1680,WORK+1722,WORK+2058,WORK+2100
  FDB   0       ; CASE 3,4
  FDB   WORK+168,WORK+546,WORK+924,WORK+1680
  FDB   WORK+2058,WORK+2436,WORK+2814,WORK+3192
  FDB   WORK+1134,WORK+1176,WORK+1218,WORK+1260
  FDB   WORK+1344,WORK+1386,WORK+1428,WORK+1470
  FDB   WORK+1638,WORK+1722,WORK+2016,WORK+2100
  FDB   0       ; CASE 3,5
  FDB   WORK+210,WORK+588,WORK+966,WORK+1722
  FDB   WORK+2100,WORK+2478,WORK+2856,WORK+3234
  FDB   WORK+1134,WORK+1176,WORK+1218,WORK+1260
  FDB   WORK+1302,WORK+1386,WORK+1428,WORK+1470
  FDB   WORK+1638,WORK+1680,WORK+2016,WORK+2058
  FDB   0       ; CASE 3,6
  FDB   WORK+252,WORK+630,WORK+1008,WORK+1764
  FDB   WORK+2142,WORK+2520,WORK+2898,WORK+3276
  FDB   WORK+1134,WORK+1176,WORK+1218,WORK+1260
  FDB   WORK+1302,WORK+1344,WORK+1428,WORK+1470
  FDB   WORK+1806,WORK+1848,WORK+2184,WORK+2226
  FDB   0       ; CASE 3,7
  FDB   WORK+294,WORK+672,WORK+1050,WORK+1806
  FDB   WORK+2184,WORK+2562,WORK+2940,WORK+3318
  FDB   WORK+1134,WORK+1176,WORK+1218,WORK+1260
  FDB   WORK+1302,WORK+1344,WORK+1386,WORK+1470
  FDB   WORK+1764,WORK+1848,WORK+2142,WORK+2226
  FDB   0       ; CASE 3,8
  FDB   WORK+336,WORK+714,WORK+1092,WORK+1848
  FDB   WORK+2226,WORK+2604,WORK+2982,WORK+3360
  FDB   WORK+1134,WORK+1176,WORK+1218,WORK+1260
  FDB   WORK+1302,WORK+1344,WORK+1386,WORK+1428
  FDB   WORK+1764,WORK+1806,WORK+2142,WORK+2184
  FDB   0       ; CASE 4,0
  FDB   WORK+0,WORK+378,WORK+756,WORK+1134
  FDB   WORK+1890,WORK+2268,WORK+2646,WORK+3024
  FDB   WORK+1554,WORK+1596,WORK+1638,WORK+1680
  FDB   WORK+1722,WORK+1764,WORK+1806,WORK+1848
  FDB   WORK+1176,WORK+1218,WORK+1932,WORK+1974
  FDB   0       ; CASE 4,1
  FDB   WORK+42,WORK+420,WORK+798,WORK+1176
  FDB   WORK+1932,WORK+2310,WORK+2688,WORK+3066
  FDB   WORK+1512,WORK+1596,WORK+1638,WORK+1680
  FDB   WORK+1722,WORK+1764,WORK+1806,WORK+1848
  FDB   WORK+1134,WORK+1218,WORK+1890,WORK+1974
  FDB   0       ; CASE 4,2
  FDB   WORK+84,WORK+462,WORK+840,WORK+1218
  FDB   WORK+1974,WORK+2352,WORK+2730,WORK+3108
  FDB   WORK+1512,WORK+1554,WORK+1638,WORK+1680
  FDB   WORK+1722,WORK+1764,WORK+1806,WORK+1848
  FDB   WORK+1134,WORK+1176,WORK+1890,WORK+1932
  FDB   0       ; CASE 4,3
  FDB   WORK+126,WORK+504,WORK+882,WORK+1260
  FDB   WORK+2016,WORK+2394,WORK+2772,WORK+3150
  FDB   WORK+1512,WORK+1554,WORK+1596,WORK+1680
  FDB   WORK+1722,WORK+1764,WORK+1806,WORK+1848
  FDB   WORK+1302,WORK+1344,WORK+2058,WORK+2100
  FDB   0       ; CASE 4,4
  FDB   WORK+168,WORK+546,WORK+924,WORK+1302
  FDB   WORK+2058,WORK+2436,WORK+2814,WORK+3192
  FDB   WORK+1512,WORK+1554,WORK+1596,WORK+1638
  FDB   WORK+1722,WORK+1764,WORK+1806,WORK+1848
  FDB   WORK+1260,WORK+1344,WORK+2016,WORK+2100
  FDB   0       ; CASE 4,5
  FDB   WORK+210,WORK+588,WORK+966,WORK+1344
  FDB   WORK+2100,WORK+2478,WORK+2856,WORK+3234
  FDB   WORK+1512,WORK+1554,WORK+1596,WORK+1638
  FDB   WORK+1680,WORK+1764,WORK+1806,WORK+1848
  FDB   WORK+1260,WORK+1302,WORK+2016,WORK+2058
  FDB   0       ; CASE 4,6
  FDB   WORK+252,WORK+630,WORK+1008,WORK+1386
  FDB   WORK+2142,WORK+2520,WORK+2898,WORK+3276
  FDB   WORK+1512,WORK+1554,WORK+1596,WORK+1638
  FDB   WORK+1680,WORK+1722,WORK+1806,WORK+1848
  FDB   WORK+1428,WORK+1470,WORK+2184,WORK+2226
  FDB   0       ; CASE 4,7
  FDB   WORK+294,WORK+672,WORK+1050,WORK+1428
  FDB   WORK+2184,WORK+2562,WORK+2940,WORK+3318
  FDB   WORK+1512,WORK+1554,WORK+1596,WORK+1638
  FDB   WORK+1680,WORK+1722,WORK+1764,WORK+1848
  FDB   WORK+1386,WORK+1470,WORK+2142,WORK+2226
  FDB   0       ; CASE 4,8
  FDB   WORK+336,WORK+714,WORK+1092,WORK+1470
  FDB   WORK+2226,WORK+2604,WORK+2982,WORK+3360
  FDB   WORK+1512,WORK+1554,WORK+1596,WORK+1638
  FDB   WORK+1680,WORK+1722,WORK+1764,WORK+1806
  FDB   WORK+1386,WORK+1428,WORK+2142,WORK+2184
  FDB   0       ; CASE 5,0
  FDB   WORK+0,WORK+378,WORK+756,WORK+1134
  FDB   WORK+1512,WORK+2268,WORK+2646,WORK+3024
  FDB   WORK+1932,WORK+1974,WORK+2016,WORK+2058
  FDB   WORK+2100,WORK+2142,WORK+2184,WORK+2226
  FDB   WORK+1176,WORK+1218,WORK+1554,WORK+1596
  FDB   0       ; CASE 5,1
  FDB   WORK+42,WORK+420,WORK+798,WORK+1176
  FDB   WORK+1554,WORK+2310,WORK+2688,WORK+3066
  FDB   WORK+1890,WORK+1974,WORK+2016,WORK+2058
  FDB   WORK+2100,WORK+2142,WORK+2184,WORK+2226
  FDB   WORK+1134,WORK+1218,WORK+1512,WORK+1596
  FDB   0       ; CASE 5,2
  FDB   WORK+84,WORK+462,WORK+840,WORK+1218
  FDB   WORK+1596,WORK+2352,WORK+2730,WORK+3108
  FDB   WORK+1890,WORK+1932,WORK+2016,WORK+2058
  FDB   WORK+2100,WORK+2142,WORK+2184,WORK+2226
  FDB   WORK+1134,WORK+1176,WORK+1512,WORK+1554
  FDB   0       ; CASE 5,3
  FDB   WORK+126,WORK+504,WORK+882,WORK+1260
  FDB   WORK+1638,WORK+2394,WORK+2772,WORK+3150
  FDB   WORK+1890,WORK+1932,WORK+1974,WORK+2058
  FDB   WORK+2100,WORK+2142,WORK+2184,WORK+2226
  FDB   WORK+1302,WORK+1344,WORK+1680,WORK+1722
  FDB   0       ; CASE 5,4
  FDB   WORK+168,WORK+546,WORK+924,WORK+1302
  FDB   WORK+1680,WORK+2436,WORK+2814,WORK+3192
  FDB   WORK+1890,WORK+1932,WORK+1974,WORK+2016
  FDB   WORK+2100,WORK+2142,WORK+2184,WORK+2226
  FDB   WORK+1260,WORK+1344,WORK+1638,WORK+1722
  FDB   0       ; CASE 5,5
  FDB   WORK+210,WORK+588,WORK+966,WORK+1344
  FDB   WORK+1722,WORK+2478,WORK+2856,WORK+3234
  FDB   WORK+1890,WORK+1932,WORK+1974,WORK+2016
  FDB   WORK+2058,WORK+2142,WORK+2184,WORK+2226
  FDB   WORK+1260,WORK+1302,WORK+1638,WORK+1680
  FDB   0       ; CASE 5,6
  FDB   WORK+252,WORK+630,WORK+1008,WORK+1386
  FDB   WORK+1764,WORK+2520,WORK+2898,WORK+3276
  FDB   WORK+1890,WORK+1932,WORK+1974,WORK+2016
  FDB   WORK+2058,WORK+2100,WORK+2184,WORK+2226
  FDB   WORK+1428,WORK+1470,WORK+1806,WORK+1848
  FDB   0       ; CASE 5,7
  FDB   WORK+294,WORK+672,WORK+1050,WORK+1428
  FDB   WORK+1806,WORK+2562,WORK+2940,WORK+3318
  FDB   WORK+1890,WORK+1932,WORK+1974,WORK+2016
  FDB   WORK+2058,WORK+2100,WORK+2142,WORK+2226
  FDB   WORK+1386,WORK+1470,WORK+1764,WORK+1848
  FDB   0       ; CASE 5,8
  FDB   WORK+336,WORK+714,WORK+1092,WORK+1470
  FDB   WORK+1848,WORK+2604,WORK+2982,WORK+3360
  FDB   WORK+1890,WORK+1932,WORK+1974,WORK+2016
  FDB   WORK+2058,WORK+2100,WORK+2142,WORK+2184
  FDB   WORK+1386,WORK+1428,WORK+1764,WORK+1806
  FDB   0       ; CASE 6,0
  FDB   WORK+0,WORK+378,WORK+756,WORK+1134
  FDB   WORK+1512,WORK+1890,WORK+2646,WORK+3024
  FDB   WORK+2310,WORK+2352,WORK+2394,WORK+2436
  FDB   WORK+2478,WORK+2520,WORK+2562,WORK+2604
  FDB   WORK+2688,WORK+2730,WORK+3066,WORK+3108
  FDB   0       ; CASE 6,1
  FDB   WORK+42,WORK+420,WORK+798,WORK+1176
  FDB   WORK+1554,WORK+1932,WORK+2688,WORK+3066
  FDB   WORK+2268,WORK+2352,WORK+2394,WORK+2436
  FDB   WORK+2478,WORK+2520,WORK+2562,WORK+2604
  FDB   WORK+2646,WORK+2730,WORK+3024,WORK+3108
  FDB   0       ; CASE 6,2
  FDB   WORK+84,WORK+462,WORK+840,WORK+1218
  FDB   WORK+1596,WORK+1974,WORK+2730,WORK+3108
  FDB   WORK+2268,WORK+2310,WORK+2394,WORK+2436
  FDB   WORK+2478,WORK+2520,WORK+2562,WORK+2604
  FDB   WORK+2646,WORK+2688,WORK+3024,WORK+3066
  FDB   0       ; CASE 6,3
  FDB   WORK+126,WORK+504,WORK+882,WORK+1260
  FDB   WORK+1638,WORK+2016,WORK+2772,WORK+3150
  FDB   WORK+2268,WORK+2310,WORK+2352,WORK+2436
  FDB   WORK+2478,WORK+2520,WORK+2562,WORK+2604
  FDB   WORK+2814,WORK+2856,WORK+3192,WORK+3234
  FDB   0       ; CASE 6,4
  FDB   WORK+168,WORK+546,WORK+924,WORK+1302
  FDB   WORK+1680,WORK+2058,WORK+2814,WORK+3192
  FDB   WORK+2268,WORK+2310,WORK+2352,WORK+2394
  FDB   WORK+2478,WORK+2520,WORK+2562,WORK+2604
  FDB   WORK+2772,WORK+2856,WORK+3150,WORK+3234
  FDB   0       ; CASE 6,5
  FDB   WORK+210,WORK+588,WORK+966,WORK+1344
  FDB   WORK+1722,WORK+2100,WORK+2856,WORK+3234
  FDB   WORK+2268,WORK+2310,WORK+2352,WORK+2394
  FDB   WORK+2436,WORK+2520,WORK+2562,WORK+2604
  FDB   WORK+2772,WORK+2814,WORK+3150,WORK+3192
  FDB   0       ; CASE 6,6
  FDB   WORK+252,WORK+630,WORK+1008,WORK+1386
  FDB   WORK+1764,WORK+2142,WORK+2898,WORK+3276
  FDB   WORK+2268,WORK+2310,WORK+2352,WORK+2394
  FDB   WORK+2436,WORK+2478,WORK+2562,WORK+2604
  FDB   WORK+2940,WORK+2982,WORK+3318,WORK+3360
  FDB   0       ; CASE 6,7
  FDB   WORK+294,WORK+672,WORK+1050,WORK+1428
  FDB   WORK+1806,WORK+2184,WORK+2940,WORK+3318
  FDB   WORK+2268,WORK+2310,WORK+2352,WORK+2394
  FDB   WORK+2436,WORK+2478,WORK+2520,WORK+2604
  FDB   WORK+2898,WORK+2982,WORK+3276,WORK+3360
  FDB   0       ; CASE 6,8
  FDB   WORK+336,WORK+714,WORK+1092,WORK+1470
  FDB   WORK+1848,WORK+2226,WORK+2982,WORK+3360
  FDB   WORK+2268,WORK+2310,WORK+2352,WORK+2394
  FDB   WORK+2436,WORK+2478,WORK+2520,WORK+2562
  FDB   WORK+2898,WORK+2940,WORK+3276,WORK+3318
  FDB   0       ; CASE 7,0
  FDB   WORK+0,WORK+378,WORK+756,WORK+1134
  FDB   WORK+1512,WORK+1890,WORK+2268,WORK+3024
  FDB   WORK+2688,WORK+2730,WORK+2772,WORK+2814
  FDB   WORK+2856,WORK+2898,WORK+2940,WORK+2982
  FDB   WORK+2310,WORK+2352,WORK+3066,WORK+3108
  FDB   0       ; CASE 7,1
  FDB   WORK+42,WORK+420,WORK+798,WORK+1176
  FDB   WORK+1554,WORK+1932,WORK+2310,WORK+3066
  FDB   WORK+2646,WORK+2730,WORK+2772,WORK+2814
  FDB   WORK+2856,WORK+2898,WORK+2940,WORK+2982
  FDB   WORK+2268,WORK+2352,WORK+3024,WORK+3108
  FDB   0       ; CASE 7,2
  FDB   WORK+84,WORK+462,WORK+840,WORK+1218
  FDB   WORK+1596,WORK+1974,WORK+2352,WORK+3108
  FDB   WORK+2646,WORK+2688,WORK+2772,WORK+2814
  FDB   WORK+2856,WORK+2898,WORK+2940,WORK+2982
  FDB   WORK+2268,WORK+2310,WORK+3024,WORK+3066
  FDB   0       ; CASE 7,3
  FDB   WORK+126,WORK+504,WORK+882,WORK+1260
  FDB   WORK+1638,WORK+2016,WORK+2394,WORK+3150
  FDB   WORK+2646,WORK+2688,WORK+2730,WORK+2814
  FDB   WORK+2856,WORK+2898,WORK+2940,WORK+2982
  FDB   WORK+2436,WORK+2478,WORK+3192,WORK+3234
  FDB   0       ; CASE 7,4
  FDB   WORK+168,WORK+546,WORK+924,WORK+1302
  FDB   WORK+1680,WORK+2058,WORK+2436,WORK+3192
  FDB   WORK+2646,WORK+2688,WORK+2730,WORK+2772
  FDB   WORK+2856,WORK+2898,WORK+2940,WORK+2982
  FDB   WORK+2394,WORK+2478,WORK+3150,WORK+3234
  FDB   0       ; CASE 7,5
  FDB   WORK+210,WORK+588,WORK+966,WORK+1344
  FDB   WORK+1722,WORK+2100,WORK+2478,WORK+3234
  FDB   WORK+2646,WORK+2688,WORK+2730,WORK+2772
  FDB   WORK+2814,WORK+2898,WORK+2940,WORK+2982
  FDB   WORK+2394,WORK+2436,WORK+3150,WORK+3192
  FDB   0       ; CASE 7,6
  FDB   WORK+252,WORK+630,WORK+1008,WORK+1386
  FDB   WORK+1764,WORK+2142,WORK+2520,WORK+3276
  FDB   WORK+2646,WORK+2688,WORK+2730,WORK+2772
  FDB   WORK+2814,WORK+2856,WORK+2940,WORK+2982
  FDB   WORK+2562,WORK+2604,WORK+3318,WORK+3360
  FDB   0       ; CASE 7,7
  FDB   WORK+294,WORK+672,WORK+1050,WORK+1428
  FDB   WORK+1806,WORK+2184,WORK+2562,WORK+3318
  FDB   WORK+2646,WORK+2688,WORK+2730,WORK+2772
  FDB   WORK+2814,WORK+2856,WORK+2898,WORK+2982
  FDB   WORK+2520,WORK+2604,WORK+3276,WORK+3360
  FDB   0       ; CASE 7,8
  FDB   WORK+336,WORK+714,WORK+1092,WORK+1470
  FDB   WORK+1848,WORK+2226,WORK+2604,WORK+3360
  FDB   WORK+2646,WORK+2688,WORK+2730,WORK+2772
  FDB   WORK+2814,WORK+2856,WORK+2898,WORK+2940
  FDB   WORK+2520,WORK+2562,WORK+3276,WORK+3318
  FDB   0       ; CASE 8,0
  FDB   WORK+0,WORK+378,WORK+756,WORK+1134
  FDB   WORK+1512,WORK+1890,WORK+2268,WORK+2646
  FDB   WORK+3066,WORK+3108,WORK+3150,WORK+3192
  FDB   WORK+3234,WORK+3276,WORK+3318,WORK+3360
  FDB   WORK+2310,WORK+2352,WORK+2688,WORK+2730
  FDB   0       ; CASE 8,1
  FDB   WORK+42,WORK+420,WORK+798,WORK+1176
  FDB   WORK+1554,WORK+1932,WORK+2310,WORK+2688
  FDB   WORK+3024,WORK+3108,WORK+3150,WORK+3192
  FDB   WORK+3234,WORK+3276,WORK+3318,WORK+3360
  FDB   WORK+2268,WORK+2352,WORK+2646,WORK+2730
  FDB   0       ; CASE 8,2
  FDB   WORK+84,WORK+462,WORK+840,WORK+1218
  FDB   WORK+1596,WORK+1974,WORK+2352,WORK+2730
  FDB   WORK+3024,WORK+3066,WORK+3150,WORK+3192
  FDB   WORK+3234,WORK+3276,WORK+3318,WORK+3360
  FDB   WORK+2268,WORK+2310,WORK+2646,WORK+2688
  FDB   0       ; CASE 8,3
  FDB   WORK+126,WORK+504,WORK+882,WORK+1260
  FDB   WORK+1638,WORK+2016,WORK+2394,WORK+2772
  FDB   WORK+3024,WORK+3066,WORK+3108,WORK+3192
  FDB   WORK+3234,WORK+3276,WORK+3318,WORK+3360
  FDB   WORK+2436,WORK+2478,WORK+2814,WORK+2856
  FDB   0       ; CASE 8,4
  FDB   WORK+168,WORK+546,WORK+924,WORK+1302
  FDB   WORK+1680,WORK+2058,WORK+2436,WORK+2814
  FDB   WORK+3024,WORK+3066,WORK+3108,WORK+3150
  FDB   WORK+3234,WORK+3276,WORK+3318,WORK+3360
  FDB   WORK+2394,WORK+2478,WORK+2772,WORK+2856
  FDB   0       ; CASE 8,5
  FDB   WORK+210,WORK+588,WORK+966,WORK+1344
  FDB   WORK+1722,WORK+2100,WORK+2478,WORK+2856
  FDB   WORK+3024,WORK+3066,WORK+3108,WORK+3150
  FDB   WORK+3192,WORK+3276,WORK+3318,WORK+3360
  FDB   WORK+2394,WORK+2436,WORK+2772,WORK+2814
  FDB   0       ; CASE 8,6
  FDB   WORK+252,WORK+630,WORK+1008,WORK+1386
  FDB   WORK+1764,WORK+2142,WORK+2520,WORK+2898
  FDB   WORK+3024,WORK+3066,WORK+3108,WORK+3150
  FDB   WORK+3192,WORK+3234,WORK+3318,WORK+3360
  FDB   WORK+2562,WORK+2604,WORK+2940,WORK+2982
  FDB   0       ; CASE 8,7
  FDB   WORK+294,WORK+672,WORK+1050,WORK+1428
  FDB   WORK+1806,WORK+2184,WORK+2562,WORK+2940
  FDB   WORK+3024,WORK+3066,WORK+3108,WORK+3150
  FDB   WORK+3192,WORK+3234,WORK+3276,WORK+3360
  FDB   WORK+2520,WORK+2604,WORK+2898,WORK+2982
  FDB   0       ; CASE 8,8
  FDB   WORK+336,WORK+714,WORK+1092,WORK+1470
  FDB   WORK+1848,WORK+2226,WORK+2604,WORK+2982
  FDB   WORK+3024,WORK+3066,WORK+3108,WORK+3150
  FDB   WORK+3192,WORK+3234,WORK+3276,WORK+3318
  FDB   WORK+2520,WORK+2562,WORK+2898,WORK+2940
  FDB   -1      ; sentinel

***************************************
* Notre propre pile car celle en place
* n'est peut-etre pas assez grosse.
***************************************
STACKEND
  BRN   STACKEND
  RMB   81*5+32,0
STACKTOP
***************************************
* Quelques infos
***************************************
  ECHO  START        = $INI
  ECHO  SOLVE        = $SOLVE
  ECHO  Debug        = &DEBUG
  ECHO  Grille       = &GRID
  ECHO  Taille Algo  = &ONESOL-SOLVE
  ECHO  Taille Work  = &STACKEND-WORK
  ECHO  Taille Stack = &STACKTOP-STACKEND bytes

  END   INI
