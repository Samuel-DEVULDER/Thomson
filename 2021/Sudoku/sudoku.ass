(main)SUDOKU

DEBUG SET   0     ; debug la resolution
DBGEN SET   0     ; debug la generation
GENMX SET   0     ; algorithme de generation 0/1
GRID  SET   17

  ORG   $A000
  BRA   INI

***************************************
* Le sudoku a resoudre
***************************************
SUDOKU
  IFEQ  GRID
  RMB   9*9,'0
  ENDC
  IFEQ  GRID-1
  FCC   "000000001"
  FCC   "210000904"
  FCC   "403500600"
  FCC   "900204500"
  FCC   "002705800"
  FCC   "001608003"
  FCC   "004007309"
  FCC   "709000068"
  FCC   "100000000"
  ENDC
  IFEQ  GRID-17
  FCC   "000000010"
  FCC   "000002003"
  FCC   "000400000"
  FCC   "000000500"
  FCC   "401600000"
  FCC   "007100000"
  FCC   "050000200"
  FCC   "000080040"
  FCC   "030910000"
  ENDC
***************************************
* Point d'entree
***************************************
INI
  PSHS  D,X,Y,U,CC,DP
  STS   BAKS-2
  LDS   #STACKTOP
  

  JSR   PUTS
  FCC   "Input:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0


  JSR   TMRON
  JSR   TOWORK
  LDU   #CPYSOL
  JSR   SOLVE
  JSR   TMROFF

  LBEQ  NOSOL

  JSR   PUTS
  FCC   "Output:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0
  JMP   FINSOL 
  
*  lecture arguments a exec
  JSR   $3FFD       ; argument dispo ?
  BEQ   USAGE       ; non => passe
  JSR   $3FEB       ; lecture argment
  CMPX  #17         ; <17 pas de sol
  BLT   USAGE
  CMPX  #81         ; >=81 inutile
  BGT   USAGE
  TFR   X,D         ; passage de X
  TFR   B,A         ; dans A
  BRA INI1
USAGE
  JSR   PUTS
  FCC "Usage:"
  FCB 13,10
  FCC "  EXEC &HA000,NB_INDICES"
  FCB 13,10
  FCC "avec"
  FCB 13,10
  FCC "  17 <= NB_INDICES <= 81"
  FCB 13,10,0
  JMP EXIT
INI1

  JSR   RNDINI      ; ajoute un peu d'entropie

  JSR   PUTS  
  FCC   "Generation..."
  FCB   $18,0
  JSR   TMRON
  JSR   GENERATE
  JSR   TMROFF
  JSR   TMRPRT
  JSR   PUTS
  FCC   "secs"
  FCB   13,10,0

  JSR   PUTS
  FCC   "Input:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0

  JSR   TMRON
  JSR   TOWORK
  LDU   #CPYSOL
  JSR   SOLVE
  JSR   TMROFF
  BCC   NOSOL

  JSR   PUTS
  FCC   "Output:"
  FCB   13,10,32,32,0
  JSR   AFFICHE
  JSR   PUTS
  FCB   13,0
  BRA   FINSOL

NOSOL
  BSR   PUTS
  FCC   "No solution!"
  FCB   10,13,0

FINSOL
  JSR   PUTS
  FCC   "Time: "
  FCB   0
  JSR   TMRPRT
  JSR   PUTS
  FCC   "secs"
  FCB   13,10,0
EXIT
  LDS   #0000
BAKS
  PULS  D,X,Y,U,CC,DP,PC

***************************************
* Affiche le sudoku
***************************************
AFFICHE
  PSHS  D,X
  LDX   #SUDOKU
  BSR   AFF3S
  BSR   SCROLL
  BSR   AFFIV
  BSR   AFF3L
  BSR   AFFIV
  BSR   AFF3S
  PULS  D,X,PC
* scroll 3 lignes
SCROLL
  BSR   PUTS
  FCB   10,10,10,11,11,11,$80
AFFIV
  BSR   PUTS
  FCB   $1B,$5C,$80
* scroll + 3 ligne
AFF3S
  BSR   SCROLL
* affiche un bloc de 3 lignes
AFF3L
  BSR   AFF1L
  BSR   AFF1L
* affiche une ligne
AFF1L
  BSR   AFF3I
  BSR   AFF3I
  BSR   AFF3I
  BSR   AFFIV
  BSR   PUTS
  FCB   8,8,8
  FCB   8,8,8
  FCB   8,8,8
  FCB   10,$80
* inv vide + 3 char
AFF3I
  BSR   AFFIV
* affiche 3 char
AFF3
  BSR   AFF1
  BSR   AFF1
* affiche 1 char
AFF1
  LDB   ,X+
  CMPB  #'0
  BNE   PUTC
  LDB   #'.
* /!\ passe au travers

***************************************
* affiche un caractere
***************************************
PUTC
  JMP   $E803

***************************************
* affiche une chaine
*
* La chaine suit le code appellant.
* Si la chaine se termine par 0, alors
* on retourne a l'instruction qui suit.
* Si en revanche elle se termine par
* une valeur negative, on poursuit sur
* la routine au dessus.
***************************************
PUTS
  PSHS  B,X
  LDX   3,S
PUTS1
  LDB   ,X+
  BMI   PUTS3
  BEQ   PUTS2
  BSR   PUTC
  BRA   PUTS1
PUTS2
  STX   3,S
  PULS  B,X,PC
PUTS3
  PULS  B,X
  LEAS  2,S
  RTS

***************************************
* Activation timer
***************************************
TIMEPT  EQU   $6027
STATUS  EQU   $6019
TMRON
  PSHS  D,CC
  ORCC  #$50
  LDD   #0
  STD   TMRDAT
  STD   TMRDAT+2

  LDD   TIMEPT
  STD   TMROLD+1
  LDD   #TMRSVC
  STD   TIMEPT
  LDA   #$20
  ORA   STATUS
  STA   STATUS

  LDA   #$10    ; capture etat IRQ
  ANDA  ,S
  STA   TMRCC+1
  
  LDA   #$EF    ; active IEQ
  ANDA  ,S
  STA   ,S
  PULS  D,CC,PC

***************************************
* Desactivation timer
***************************************
TMROFF
  PSHS  D,CC
  ORCC  #$50
  LDA   #255-$20
  ANDA  STATUS
  STA   STATUS
TMROLD
  LDD   #0
  STD   TIMEPT
  LDA   #$EF
  ANDA  ,S
TMRCC
  ORA   #0
  STA   ,S
  PULS  CC,D,PC

***************************************
* Affichage timer
***************************************
TMRPRT
  PSHS  X,D,CC
  ORCC  #$50
  LDX   #TMRDAT+4
  LDA   #4
TMRPR1
  LDB   ,-X         ; on empile les
  ANDB  #15         ; 8 digits
  STB   ,-S
  LDB   ,X
  LSRB
  LSRB
  LSRB
  LSRB
  STB   ,-S
  DECA
  BNE   TMRPR1
  LDB   #$80
  ORB   6,S         ; on marque le
  STB   6,S         ; chiffre des unites
TMRPR2
  LDB   ,S+
  BEQ   TMRPR2      ; on saute au dessus des '0'
  BMI   TMRPR4      ; => dernier chiffre
TMRPR3
  BSR   TMRPR5
  LDB   ,S+         ; suivant
  BPL   TMRPR3
TMRPR4
  ANDB  #$7F        ; l'avant dernier chiffre
  BSR   TMRPR5
  LDB   #'.
  JSR   PUTC
  LDB   ,S+
  BSR   TMRPR5
  PULS  X,D,CC,PC
TMRPR5
  ADDB  #'0
  JMP   PUTC

***************************************
* Interruption timer
***************************************
TMRSVC
  LDX   #TMRDAT+4
  COMA          ; C=1
TMRSV1
  LDA   ,-X     ; le compteur
  ADCA  #0      ; marche directemetnt
  DAA           ; en BCD
  STA   ,X
  BCS   TMRSV1
  JMP   $E830

***************************************
* Donnee Timer
***************************************
TMRDAT
  FDB   0,0

***************************************
* Converti le SUDOKU vers WORK
* (espace dde travail optimise)
***************************************
TOWORK
  PSHS  D,X,Y,U
  LDX   #SUDOKU
  LDY   #MASKS
  LDU   #WORK+1
TOW1
  LDB   ,X+
  SUBB  #'0
  LSLB
  LDD   B,Y
  CLR   -1,U
  STD   ,U
  LEAU  43,U
  CMPX  #SUDOKU+81
  BNE   TOW1

  LDY   #BITCOUNT+128
TOW2
  LEAU  -43,U
  JSR   UPDATE
  CMPU  #WORK+1
  BNE   TOW2
  
  PULS  D,X,Y,U,PC

***************************************
* Converti le WORK vers SUDOKU
***************************************
TOSUDOKU
  PSHS  D,X,U
  LDX   #SUDOKU
  LDU   #WORK+1
TOSUD1
  LDD   ,U
  BSR   MSKDGT
  STA   ,X+
  LEAU  43,U
  CMPX  #SUDOKU+81
  BNE   TOSUD1
  PULS  D,X,U,PC

***************************************
* Converti un mask en ascci
***************************************
MSKDGT
  ANDA  #1
  BEQ   MSKDG1
  LDA   #'9
  RTS
MSKDG1
  TSTB
  BNE   MSKDG2
  DECA
MSKDG2
  INCA
  LSRB
  BNE   MSKDG2
  ADDA  #'0
  RTS

***************************************
* Callback qui stoppe a la 1ere soluce
* et copy le resultat dans SUDOKU
***************************************
CPYSOL
  BSR   TOSUDOKU

***************************************
* Callback qui stoppe a la 1ere soluce
***************************************
CHKSOL
  COMB        ; C=1 ==> on stoppe
  RTS

***************************************
* Algo de resolution
*
* En entree:
*   WORK initialise (TOWORK)
*
*   U=addr. routine appelle si une
*       solution est trouvee.
*       Cette routine doit retourner:
*       C=0 (CLRB) s'il faut continuer
*       C=1 (COMB) s'il faut stopper. 
*
* En sortie:
*   WORK inchange
*   C=0 si allee jusqu'au bout
*       (pas de solution)
*   C=1 sinon
*       (solution trouvee)
***************************************
SOLVE
  PSHS  DP,X,Y,U,D
  LDY   #BITCOUNT+128
  SETDP BSTCNT<-8
  LDA   #BSTCNT<-8
  TFR   A,DP
  STU   <SOLFND+1
  IFNE  DEBUG
  JSR   PUTS
  FCC   "DEBUG:"
  FCB   10,13,32,32,0
  JSR   DBGPRT
  JSR   PUTS
  FCB   $14,$1B,$68,0
  ENDC
  JSR   SOLV0
  IFNE  DEBUG
  PSHS  CC
  JSR   PUTS
  FCB   $11,$1B,$69,11,13,$18
  FCB   10,$18,10,$18,10,$18,10,$18,10,$18
  FCB   10,$18,10,$18,10,$18,10,$18,10,$18
  FCB   11,11,11,11,11,11,11,11,11,11,0
  PULS  CC
  ENDC
  PULS  DP,X,Y,U,D,PC

***************************************
* Conversion chiffre -> masque
***************************************
MASKS
  FDB   %000000000
  FDB   %000000001
  FDB   %000000010
  FDB   %000000100
  FDB   %000001000
  FDB   %000010000
  FDB   %000100000
  FDB   %001000000
  FDB   %010000000
  FDB   %100000000

* alignement DP
  RMB   ((*+255)&$FF00)-*-23,0

* Mets a jour les caches des cases
* impactees par U et lanse la rech.
UPDSLV
  JSR   <UPDIMP
  BCC   SOLV0
  CLRA
  RTS

* recherche recursive
* Sortie A=0, 
*        C=1 si on stoppe la recherche
* WORK est remis a son etat d'entree en sortie
SOLV0
  PSHS  B,U

  IFNE  DEBUG
  JSR   DBGPRT
  ENDC

  LDB   #10       ; majorant
  STB   <BSTCNT+1

* recherche une case vide
  LDU   #WORK-43
SOLV1
  LEAU  43,U
SOLV1a
  LDA   ,U
  BEQ   SOLV1
  BMI   SOLV4     ; sentinelle ? oui => termine cette partie
 
BSTCNT
  CMPA  #0        ; meilleure ?
  BGE   SOLV1     ; non => case suivante
  STA   <BSTCNT+1 ; on sauve le nouveau nb de choix,
  STU   <BSTCEL+1 ; et la case actuelle   
  DECA
  BNE   SOLV1     ; on passe a la case suivante (sauf si on a qu'un choix)
*  BRA   SOLV1
 
* on a fini de trouver la meilleure case possible
SOLV4
  LDB   #10
  SUBB  <BSTCNT+1 ; comparaison qui force C=0
  BNE   BSTCEL    ; il y a eu des cases vides ==> on choisit la meilleure

* la grille est pleine: on a trouve
SOLFND
  JSR   >$1234    ; callback pour continuer (C=0) ou stopper (C=1)
  LDA   #0
  PULS  B,U,PC

* recup meilleur mask et meilleur case
BSTCEL
  LDU   #0        ; adr cell
  CLR   ,U+       ; TODO make it faster ?
POSMSK
  JSR   <GETMASK

* on essaie toutes les possibilites
  TSTA            ; chiffre 9 possible ?
  BEQ   SOLV5     ; non ==> on passe a la partie basse (1..8)
  STA   ,U        ; ecrit chiffre 9
  BSR   UPDSLV    ; recherche
  STA   ,U        ; annulation chiffre
  BCS   SOLVRET1  ; il faut stopper ?
SOLV5
  STB   <MSKLOW-1
  NEGB            ; calcul rapide d'un bit a 1
  ANDB  #0        ; avec la formule (B & -B)
MSKLOW
  STB   1,U       ; on fige ce chiffre dans la case
  BEQ   SOLVRET0  ; plus de bits ? ==> fini (C=0)
  EORB  <MSKLOW-1 ; effacement du chiffre parmi les possibilites
  BSR   UPDSLV    ; recherche avec cette case figee
  BCC   SOLV5     ; C=0 => on continue
  STA   1,U
* BRA   SOLVRET1  ; C=1 => on stoppe

SOLVRET1
  BSR   UPDATE 
  BSR   UPDIMP
  CLRA
  COMB
  PULS  B,U,PC
  
SOLVRET0
  BSR   UPDATE 
  BSR   UPDIMP
  CLRA
  PULS  B,U,PC

***************************************
* Retourne un nombre aleatoire entre 0 
* et 255 dans B (A ecrase)
*
* Algo XOR-SHIFT 798 de George
* Marsaglia:
*  - petit (19 octets, RTS inclus)
*  - rapide (36 cycles, RTS inclus)
*  - adapte aux 8 bits (rotation 1bit)
*  - couvre tous les entiers 16bits!=0
*
* Resultat: 
* B = nb aleatoire entre 0 et 255
* A detruit (utiliser RND+1 si on veut
*            16 bits aleatoires)
***************************************
RND
  LDD   #1      ; graine
  LSRA
  RORB
  EORB  <RND+1
  STB   <RND2+1
  RORB
  EORB  <RND+2
  STB   <RND+2
RND2
  EORB  #0
  STB   <RND+1
  RTS

***************************************
* Callback qui stoppe a la 2e soluce
* (initialise TWOSOL+1 a +1)
***************************************
TWOSOL
  LDB   #0
  SUBB  #1
  STB   <TWOSOL+1
  RTS         ; retourne C=1 lorsque la valeur passe a -1

***************************************
* Mets a jour la prochaine cellule
* pointee par X
* X = pointeur sur tableau de case
* Y = BITCOUNT+128
* Sortie : X avance', D = trash
***************************************
UPDXpp
  BCS   UPD2
  LDU   ,X++
  IFNE  *-UPDATE
  ERROR "/!\ fall through"
  ENDC
  
***************************************
* Mets a jour le cache de la case 
* pointe' par U-1
*
* Entree Y=BITCOUNT+128
* Sortie D=trash
*        C=1 si pas faisable
***************************************
UPDATE
  LDD   ,U
  BEQ   UPD1
  CLR   -1,U      ; C=0
  RTS         
UPD1
  BSR   GETMASK
  ADDA  B,Y
  STA   -1,U
  SUBA  #1        ; C=1 si pas faisable
UPD2
  RTS

***************************************
* Mets a jour le cache des cases
* impactees par la valeur de la case
* U-1
* Entree Y = BITCOUNT+1
* Sortie A = trash
***************************************  
UPDIMP
  PSHS  B,U,X
  LEAX  2,U
  CLRA
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  BSR   UPDXpp
  PULS  B,U,X,PC
    
***************************************
* Recupere le masque des possibilites
* pour la cellule pointee par U
***************************************
GETMASK
  PSHS  U,X,Y
  
  PULU  D,X,Y   ; D pour que X,Y pointent sur les autres cases
  LDD   ,X
  ORA   ,Y
  ORB   1,Y
  
  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y

  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y
 
  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y
 
  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y
 
  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y
 
  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y
 
  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y
 
  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y
 
  PULU  X,Y
  ORA   ,X
  ORA   ,Y
  ORB   1,X
  ORB   1,Y

  ANDA  #1
  EORA  #1
  EORB  #255
  PULS  U,X,Y,PC

***************************************
* Genere un sudoku avec A indices
* (cases non vides).
*
* Attention, si A est trop faible
* (<17) l'algo peut ne pas terminer.
* Il faut mieux avoir A autour de 25
* pour avoir un temps de generation
* pas trop long et avoir un algo qui
* termine.
***************************************
GENERATE
  PSHS  D,X,Y,U,DP
  LDB   #BSTCNT<-8
  TFR   B,DP
  LDY   #BITCOUNT+128
  
GEN1 
  IFNE  DBGEN
  JSR PUTS
  FCB $18,10,$18,10,$18,10
  FCB $18,10,$18,10,$18,10
  FCB $18,10,$18,10,$18,10
  FCB 11,11,11
  FCB 11,11,11
  FCB 11,11,11
  FCC   "."
  FCB 0
  ENDC
  
* grille de depart
  JSR   GENSTART

* mise en place compteurs
  LDB   ,S        ; max cases bloquees
  LDA   #81
  SUBA  ,S        ; nombre de trous a creer 
  BEQ   GENDONE   ; aucun ? oui => fini
  
  
* phase 1 on efface au pif et tant que ca reste en solution
* unique on continue
GEN2a
  JSR   GENRND
  LDX   ,U
  CLR   ,U
  CLR   1,U
  JSR   GENCHK
  BNE   GEN2b
  DECA
  BEQ   GENDONE
  BRA   GEN2a
GEN2b
  STX   ,U

GEN3
  PSHS  D         ; (2) sauve nb restant (A) et nb spare (B) 

* Majorant/minorant
  IFNE  GENMX
  LDB   #10
  STB   <BSTCNT+1
  ELSE
  CLR   <BSTCNT+1
  ENDC
  
  IFNE  DBGEN
  JSR   DBGPRT
  ENDC

* on trouve la case ayant le plus de possibilites
  LDU   #WORK-42
  BRA   GEN6
GEN4
  PSHS  D         ; recolle avec le PULS X
  LDD   #0
  STD   ,U        ; sentinelle
  LEAU  40,U
  LDX   ,U
GEN5
  ORA   ,X        ; bitmask "or" avec les chiffres
  ORB   1,X       ; de la case contraignante
  LDX   ,--U      ; sentinelle atteinte ?
  BNE   GEN5      ; non => continue
  PULS  X         ; recolle avec PSHS D
  STX   ,U        ; retire sentinelle
  
  ANDA  #1
  ADDA  B,Y       ; combien de contraintes 
  CMPA  <BSTCNT+1 ; plus qu'avant ? 
  IFNE  GENMX
  BGE   GEN6      ; oui => saute
  ELSE
  BLE   GEN6
  ENDC
  STA   <BSTCNT+1 ; non => garde
  STU   <POSMSK+1
GEN6
  LEAU  42,U
  LDD   ,U
  BEQ   GEN6
  BMI   GEN6a   
  BITA  #2
  BNE   GEN6
  BRA   GEN4

* recup contenu case a effacer  
GEN6a
  LDU   <POSMSK+1
  LDD   ,U
  BSR   GENCHK      ; une seule solution ?
  BEQ   GEN7        ; oui => continue
  ORA   #2          ; non => marque bloque'
  STD   ,U          
  PULS  D           ; match (2)
  DECB
  BNE   GEN3        ; on essaye avec une autre case
  JMP   GEN1        ; plus de spare ==> nouvelle grille
  
GEN7
  PULS  D           ; match (2)
  DECA              ; encore ?
  BNE   GEN3        ; oui ==> autre case
  
GENDONE
  JSR   TOSUDOKU    ; non => termine'
  PULS  D,X,Y,U,DP,PC

* verifie qu'en effacant la case pointee par U on a
* bien une solution unique
GENCHK
  PSHS  D,U         
  LDD   #0          
  STD   ,U          ; efface case
  LDU   #TWOSOL         
  LDB   #1          ; regarde si le 
  STB   <TWOSOL+1   ; sudoku resultant
  JSR   SOLVE       ; a exactement 1 sol
  LDB   <TWOSOL+1   ; plus rapide que tst!
  PULS  D,U,PC      
  
  
* tire une case "pleine" au pif (retour dans U)
GENRND
  PSHS  D
GENRN2
  JSR   <RND
  LDA   #81
  MUL
  LDB   #42
  MUL
  ADDD  #WORK
  TFR   D,U       ; U=case au pif
  LDD   ,U        ; deja vide ?
  BEQ   GENRN2    ; oui => on retire
  BITA  #2        ; case bloquee ?
  BNE   GENRN2    ; oui => on retire  
  PULS  D,PC
  
* Genere une grille de depart
GENSTART
* met tout a 0
  LDU   #WORK
  LDX   #0
GENS1
  STX   ,U
  LEAU  42,U
  LDD   ,U
  BPL   GENS1

* rempli les chiffre 1 a 9 au hasard
  LDX   #MASKS+20
GENS2
  STD   ,U          ; ecriture chiffre
GENS3
  JSR   <RND
  LDA   #81
  MUL
  LDB   #42
  MUL
  ADDD  #WORK
  TFR   D,U
  LDD   ,U
  BNE   GENS3
  LDD   ,--X        ; nouveau chiffre
  BNE   GENS2

* qu'on resout
  LDU   #CPYSOL
  JSR   SOLVE       ; resout le sudoku
  JMP   TOWORK      ; retour dans work
 
  SETDP 255

****************************************
* initialise le generateur aleatoire
* dans un etat inconnu.
****************************************
RNDINI
  PSHS  D,X
  LDX   #0
RNDIN1
  ADDD  ,X++
  CMPX  #$E7C6
  BNE   RNDIN1
  ADDD  ,X
  BNE   RNDIN2
  INCB
RNDIN2
  STD   >RND+1
  PULS  D,X,PC
       
  IFNE  DEBUG+DBGEN
***************************************
* affiche le sudoku pour le debug
***************************************
DBGPRT
  PSHS  D,X,Y,U,DP,CC
  JSR   TOSUDOKU
  JSR   AFFICHE
  JSR   PUTS
  FCB   11,11,11,11,11
  FCB   11,11,11,11,0
  PULS  D,X,Y,U,DP,CC,PC
  ENDC

***************************************
* Tableau indiquant le nb de bits a 1
***************************************
BITCOUNT
/ EXECUTER CE QUI SUIT POUR GENERER
./luajit - <<EOF
for i=-128,127 do
  if (i%16)==0 then
    io.stdout:write('\n  FCB \t')
  elseif i>-128 then
    io.stdout:write(',')
  end
  i,n = (i+256)%256, 0
  while i>0 do
    n,i = n + (i%2), math.floor(i/2)
  end
  io.stdout:write(n)
end
io.stdout:write('\n')
EOF
/
  FCB   1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
  FCB   3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
  FCB   4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8
  FCB   0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4
  FCB   1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
  FCB   1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
  FCB   3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7

***************************************
* ESPACE DE TRAVAIL
*
* Sructure:
*    81*(case)
*    FDB  -1
* case:
*    FCB FLAG
*    FDB MASK
*    20*(FDB <ADRESSE CASE INFLUENTES>)
*
* FLAG is
*   0  fixed cell
*   n  free cell with 'n' possibilites
*  -1  end of sudoku
***************************************
/ EXECUTER POUR GENERER:
reset; ./luajit - <<EOF
long = false
print('WORK')
for i=0,8 do
  for j=0,8 do
    print('  FCB ', '0', '; CASE ' .. i .. ',' ..j)
    print('  FDB ', '0')
    t = {}
    for k=0,8 do
      if k~=i then
        if long then
          print('  FDB ', 'WORK+'..((k*9 + j)*43+1)..'   ', '; '..k..','..j)
        else
          table.insert(t, 'WORK+'..((k*9 + j)*43+1))
        end
      end
    end
    for k=0,8 do
      if k~=j then
        if long then
          print('  FDB ', 'WORK+'..((i*9 + k)*43+1)..'   ', '; '..i..','..k)
        else
          table.insert(t, 'WORK+'..((i*9 + k)*43+1))
        end
      end
    end
    local ii,jj=math.floor(i/3)*3,math.floor(j/3)*3
    for ii=ii,ii+2 do
      for jj=jj,jj+2 do
        if ii~=i and jj~=j then
          if long then
            print('  FDB ', 'WORK+'..((ii*9 + jj)*43+1)..'   ', '; '..ii..','..jj)
          else
            table.insert(t, 'WORK+'..((ii*9 + jj)*43+1))
          end
        end
      end
    end
    for i=1,#t,4 do print('  FDB ', t[i]..','..t[i+1]..','..t[i+2]..','..t[i+3]) end t = {}
  end
end
print('  FDB ',-1,'; sentinel')
EOF
/
WORK
  FCB   0       ; CASE 0,0
  FDB   0
  FDB   WORK+388,WORK+775,WORK+1162,WORK+1549
  FDB   WORK+1936,WORK+2323,WORK+2710,WORK+3097
  FDB   WORK+44,WORK+87,WORK+130,WORK+173
  FDB   WORK+216,WORK+259,WORK+302,WORK+345
  FDB   WORK+431,WORK+474,WORK+818,WORK+861
  FCB   0       ; CASE 0,1
  FDB   0
  FDB   WORK+431,WORK+818,WORK+1205,WORK+1592
  FDB   WORK+1979,WORK+2366,WORK+2753,WORK+3140
  FDB   WORK+1,WORK+87,WORK+130,WORK+173
  FDB   WORK+216,WORK+259,WORK+302,WORK+345
  FDB   WORK+388,WORK+474,WORK+775,WORK+861
  FCB   0       ; CASE 0,2
  FDB   0
  FDB   WORK+474,WORK+861,WORK+1248,WORK+1635
  FDB   WORK+2022,WORK+2409,WORK+2796,WORK+3183
  FDB   WORK+1,WORK+44,WORK+130,WORK+173
  FDB   WORK+216,WORK+259,WORK+302,WORK+345
  FDB   WORK+388,WORK+431,WORK+775,WORK+818
  FCB   0       ; CASE 0,3
  FDB   0
  FDB   WORK+517,WORK+904,WORK+1291,WORK+1678
  FDB   WORK+2065,WORK+2452,WORK+2839,WORK+3226
  FDB   WORK+1,WORK+44,WORK+87,WORK+173
  FDB   WORK+216,WORK+259,WORK+302,WORK+345
  FDB   WORK+560,WORK+603,WORK+947,WORK+990
  FCB   0       ; CASE 0,4
  FDB   0
  FDB   WORK+560,WORK+947,WORK+1334,WORK+1721
  FDB   WORK+2108,WORK+2495,WORK+2882,WORK+3269
  FDB   WORK+1,WORK+44,WORK+87,WORK+130
  FDB   WORK+216,WORK+259,WORK+302,WORK+345
  FDB   WORK+517,WORK+603,WORK+904,WORK+990
  FCB   0       ; CASE 0,5
  FDB   0
  FDB   WORK+603,WORK+990,WORK+1377,WORK+1764
  FDB   WORK+2151,WORK+2538,WORK+2925,WORK+3312
  FDB   WORK+1,WORK+44,WORK+87,WORK+130
  FDB   WORK+173,WORK+259,WORK+302,WORK+345
  FDB   WORK+517,WORK+560,WORK+904,WORK+947
  FCB   0       ; CASE 0,6
  FDB   0
  FDB   WORK+646,WORK+1033,WORK+1420,WORK+1807
  FDB   WORK+2194,WORK+2581,WORK+2968,WORK+3355
  FDB   WORK+1,WORK+44,WORK+87,WORK+130
  FDB   WORK+173,WORK+216,WORK+302,WORK+345
  FDB   WORK+689,WORK+732,WORK+1076,WORK+1119
  FCB   0       ; CASE 0,7
  FDB   0
  FDB   WORK+689,WORK+1076,WORK+1463,WORK+1850
  FDB   WORK+2237,WORK+2624,WORK+3011,WORK+3398
  FDB   WORK+1,WORK+44,WORK+87,WORK+130
  FDB   WORK+173,WORK+216,WORK+259,WORK+345
  FDB   WORK+646,WORK+732,WORK+1033,WORK+1119
  FCB   0       ; CASE 0,8
  FDB   0
  FDB   WORK+732,WORK+1119,WORK+1506,WORK+1893
  FDB   WORK+2280,WORK+2667,WORK+3054,WORK+3441
  FDB   WORK+1,WORK+44,WORK+87,WORK+130
  FDB   WORK+173,WORK+216,WORK+259,WORK+302
  FDB   WORK+646,WORK+689,WORK+1033,WORK+1076
  FCB   0       ; CASE 1,0
  FDB   0
  FDB   WORK+1,WORK+775,WORK+1162,WORK+1549
  FDB   WORK+1936,WORK+2323,WORK+2710,WORK+3097
  FDB   WORK+431,WORK+474,WORK+517,WORK+560
  FDB   WORK+603,WORK+646,WORK+689,WORK+732
  FDB   WORK+44,WORK+87,WORK+818,WORK+861
  FCB   0       ; CASE 1,1
  FDB   0
  FDB   WORK+44,WORK+818,WORK+1205,WORK+1592
  FDB   WORK+1979,WORK+2366,WORK+2753,WORK+3140
  FDB   WORK+388,WORK+474,WORK+517,WORK+560
  FDB   WORK+603,WORK+646,WORK+689,WORK+732
  FDB   WORK+1,WORK+87,WORK+775,WORK+861
  FCB   0       ; CASE 1,2
  FDB   0
  FDB   WORK+87,WORK+861,WORK+1248,WORK+1635
  FDB   WORK+2022,WORK+2409,WORK+2796,WORK+3183
  FDB   WORK+388,WORK+431,WORK+517,WORK+560
  FDB   WORK+603,WORK+646,WORK+689,WORK+732
  FDB   WORK+1,WORK+44,WORK+775,WORK+818
  FCB   0       ; CASE 1,3
  FDB   0
  FDB   WORK+130,WORK+904,WORK+1291,WORK+1678
  FDB   WORK+2065,WORK+2452,WORK+2839,WORK+3226
  FDB   WORK+388,WORK+431,WORK+474,WORK+560
  FDB   WORK+603,WORK+646,WORK+689,WORK+732
  FDB   WORK+173,WORK+216,WORK+947,WORK+990
  FCB   0       ; CASE 1,4
  FDB   0
  FDB   WORK+173,WORK+947,WORK+1334,WORK+1721
  FDB   WORK+2108,WORK+2495,WORK+2882,WORK+3269
  FDB   WORK+388,WORK+431,WORK+474,WORK+517
  FDB   WORK+603,WORK+646,WORK+689,WORK+732
  FDB   WORK+130,WORK+216,WORK+904,WORK+990
  FCB   0       ; CASE 1,5
  FDB   0
  FDB   WORK+216,WORK+990,WORK+1377,WORK+1764
  FDB   WORK+2151,WORK+2538,WORK+2925,WORK+3312
  FDB   WORK+388,WORK+431,WORK+474,WORK+517
  FDB   WORK+560,WORK+646,WORK+689,WORK+732
  FDB   WORK+130,WORK+173,WORK+904,WORK+947
  FCB   0       ; CASE 1,6
  FDB   0
  FDB   WORK+259,WORK+1033,WORK+1420,WORK+1807
  FDB   WORK+2194,WORK+2581,WORK+2968,WORK+3355
  FDB   WORK+388,WORK+431,WORK+474,WORK+517
  FDB   WORK+560,WORK+603,WORK+689,WORK+732
  FDB   WORK+302,WORK+345,WORK+1076,WORK+1119
  FCB   0       ; CASE 1,7
  FDB   0
  FDB   WORK+302,WORK+1076,WORK+1463,WORK+1850
  FDB   WORK+2237,WORK+2624,WORK+3011,WORK+3398
  FDB   WORK+388,WORK+431,WORK+474,WORK+517
  FDB   WORK+560,WORK+603,WORK+646,WORK+732
  FDB   WORK+259,WORK+345,WORK+1033,WORK+1119
  FCB   0       ; CASE 1,8
  FDB   0
  FDB   WORK+345,WORK+1119,WORK+1506,WORK+1893
  FDB   WORK+2280,WORK+2667,WORK+3054,WORK+3441
  FDB   WORK+388,WORK+431,WORK+474,WORK+517
  FDB   WORK+560,WORK+603,WORK+646,WORK+689
  FDB   WORK+259,WORK+302,WORK+1033,WORK+1076
  FCB   0       ; CASE 2,0
  FDB   0
  FDB   WORK+1,WORK+388,WORK+1162,WORK+1549
  FDB   WORK+1936,WORK+2323,WORK+2710,WORK+3097
  FDB   WORK+818,WORK+861,WORK+904,WORK+947
  FDB   WORK+990,WORK+1033,WORK+1076,WORK+1119
  FDB   WORK+44,WORK+87,WORK+431,WORK+474
  FCB   0       ; CASE 2,1
  FDB   0
  FDB   WORK+44,WORK+431,WORK+1205,WORK+1592
  FDB   WORK+1979,WORK+2366,WORK+2753,WORK+3140
  FDB   WORK+775,WORK+861,WORK+904,WORK+947
  FDB   WORK+990,WORK+1033,WORK+1076,WORK+1119
  FDB   WORK+1,WORK+87,WORK+388,WORK+474
  FCB   0       ; CASE 2,2
  FDB   0
  FDB   WORK+87,WORK+474,WORK+1248,WORK+1635
  FDB   WORK+2022,WORK+2409,WORK+2796,WORK+3183
  FDB   WORK+775,WORK+818,WORK+904,WORK+947
  FDB   WORK+990,WORK+1033,WORK+1076,WORK+1119
  FDB   WORK+1,WORK+44,WORK+388,WORK+431
  FCB   0       ; CASE 2,3
  FDB   0
  FDB   WORK+130,WORK+517,WORK+1291,WORK+1678
  FDB   WORK+2065,WORK+2452,WORK+2839,WORK+3226
  FDB   WORK+775,WORK+818,WORK+861,WORK+947
  FDB   WORK+990,WORK+1033,WORK+1076,WORK+1119
  FDB   WORK+173,WORK+216,WORK+560,WORK+603
  FCB   0       ; CASE 2,4
  FDB   0
  FDB   WORK+173,WORK+560,WORK+1334,WORK+1721
  FDB   WORK+2108,WORK+2495,WORK+2882,WORK+3269
  FDB   WORK+775,WORK+818,WORK+861,WORK+904
  FDB   WORK+990,WORK+1033,WORK+1076,WORK+1119
  FDB   WORK+130,WORK+216,WORK+517,WORK+603
  FCB   0       ; CASE 2,5
  FDB   0
  FDB   WORK+216,WORK+603,WORK+1377,WORK+1764
  FDB   WORK+2151,WORK+2538,WORK+2925,WORK+3312
  FDB   WORK+775,WORK+818,WORK+861,WORK+904
  FDB   WORK+947,WORK+1033,WORK+1076,WORK+1119
  FDB   WORK+130,WORK+173,WORK+517,WORK+560
  FCB   0       ; CASE 2,6
  FDB   0
  FDB   WORK+259,WORK+646,WORK+1420,WORK+1807
  FDB   WORK+2194,WORK+2581,WORK+2968,WORK+3355
  FDB   WORK+775,WORK+818,WORK+861,WORK+904
  FDB   WORK+947,WORK+990,WORK+1076,WORK+1119
  FDB   WORK+302,WORK+345,WORK+689,WORK+732
  FCB   0       ; CASE 2,7
  FDB   0
  FDB   WORK+302,WORK+689,WORK+1463,WORK+1850
  FDB   WORK+2237,WORK+2624,WORK+3011,WORK+3398
  FDB   WORK+775,WORK+818,WORK+861,WORK+904
  FDB   WORK+947,WORK+990,WORK+1033,WORK+1119
  FDB   WORK+259,WORK+345,WORK+646,WORK+732
  FCB   0       ; CASE 2,8
  FDB   0
  FDB   WORK+345,WORK+732,WORK+1506,WORK+1893
  FDB   WORK+2280,WORK+2667,WORK+3054,WORK+3441
  FDB   WORK+775,WORK+818,WORK+861,WORK+904
  FDB   WORK+947,WORK+990,WORK+1033,WORK+1076
  FDB   WORK+259,WORK+302,WORK+646,WORK+689
  FCB   0       ; CASE 3,0
  FDB   0
  FDB   WORK+1,WORK+388,WORK+775,WORK+1549
  FDB   WORK+1936,WORK+2323,WORK+2710,WORK+3097
  FDB   WORK+1205,WORK+1248,WORK+1291,WORK+1334
  FDB   WORK+1377,WORK+1420,WORK+1463,WORK+1506
  FDB   WORK+1592,WORK+1635,WORK+1979,WORK+2022
  FCB   0       ; CASE 3,1
  FDB   0
  FDB   WORK+44,WORK+431,WORK+818,WORK+1592
  FDB   WORK+1979,WORK+2366,WORK+2753,WORK+3140
  FDB   WORK+1162,WORK+1248,WORK+1291,WORK+1334
  FDB   WORK+1377,WORK+1420,WORK+1463,WORK+1506
  FDB   WORK+1549,WORK+1635,WORK+1936,WORK+2022
  FCB   0       ; CASE 3,2
  FDB   0
  FDB   WORK+87,WORK+474,WORK+861,WORK+1635
  FDB   WORK+2022,WORK+2409,WORK+2796,WORK+3183
  FDB   WORK+1162,WORK+1205,WORK+1291,WORK+1334
  FDB   WORK+1377,WORK+1420,WORK+1463,WORK+1506
  FDB   WORK+1549,WORK+1592,WORK+1936,WORK+1979
  FCB   0       ; CASE 3,3
  FDB   0
  FDB   WORK+130,WORK+517,WORK+904,WORK+1678
  FDB   WORK+2065,WORK+2452,WORK+2839,WORK+3226
  FDB   WORK+1162,WORK+1205,WORK+1248,WORK+1334
  FDB   WORK+1377,WORK+1420,WORK+1463,WORK+1506
  FDB   WORK+1721,WORK+1764,WORK+2108,WORK+2151
  FCB   0       ; CASE 3,4
  FDB   0
  FDB   WORK+173,WORK+560,WORK+947,WORK+1721
  FDB   WORK+2108,WORK+2495,WORK+2882,WORK+3269
  FDB   WORK+1162,WORK+1205,WORK+1248,WORK+1291
  FDB   WORK+1377,WORK+1420,WORK+1463,WORK+1506
  FDB   WORK+1678,WORK+1764,WORK+2065,WORK+2151
  FCB   0       ; CASE 3,5
  FDB   0
  FDB   WORK+216,WORK+603,WORK+990,WORK+1764
  FDB   WORK+2151,WORK+2538,WORK+2925,WORK+3312
  FDB   WORK+1162,WORK+1205,WORK+1248,WORK+1291
  FDB   WORK+1334,WORK+1420,WORK+1463,WORK+1506
  FDB   WORK+1678,WORK+1721,WORK+2065,WORK+2108
  FCB   0       ; CASE 3,6
  FDB   0
  FDB   WORK+259,WORK+646,WORK+1033,WORK+1807
  FDB   WORK+2194,WORK+2581,WORK+2968,WORK+3355
  FDB   WORK+1162,WORK+1205,WORK+1248,WORK+1291
  FDB   WORK+1334,WORK+1377,WORK+1463,WORK+1506
  FDB   WORK+1850,WORK+1893,WORK+2237,WORK+2280
  FCB   0       ; CASE 3,7
  FDB   0
  FDB   WORK+302,WORK+689,WORK+1076,WORK+1850
  FDB   WORK+2237,WORK+2624,WORK+3011,WORK+3398
  FDB   WORK+1162,WORK+1205,WORK+1248,WORK+1291
  FDB   WORK+1334,WORK+1377,WORK+1420,WORK+1506
  FDB   WORK+1807,WORK+1893,WORK+2194,WORK+2280
  FCB   0       ; CASE 3,8
  FDB   0
  FDB   WORK+345,WORK+732,WORK+1119,WORK+1893
  FDB   WORK+2280,WORK+2667,WORK+3054,WORK+3441
  FDB   WORK+1162,WORK+1205,WORK+1248,WORK+1291
  FDB   WORK+1334,WORK+1377,WORK+1420,WORK+1463
  FDB   WORK+1807,WORK+1850,WORK+2194,WORK+2237
  FCB   0       ; CASE 4,0
  FDB   0
  FDB   WORK+1,WORK+388,WORK+775,WORK+1162
  FDB   WORK+1936,WORK+2323,WORK+2710,WORK+3097
  FDB   WORK+1592,WORK+1635,WORK+1678,WORK+1721
  FDB   WORK+1764,WORK+1807,WORK+1850,WORK+1893
  FDB   WORK+1205,WORK+1248,WORK+1979,WORK+2022
  FCB   0       ; CASE 4,1
  FDB   0
  FDB   WORK+44,WORK+431,WORK+818,WORK+1205
  FDB   WORK+1979,WORK+2366,WORK+2753,WORK+3140
  FDB   WORK+1549,WORK+1635,WORK+1678,WORK+1721
  FDB   WORK+1764,WORK+1807,WORK+1850,WORK+1893
  FDB   WORK+1162,WORK+1248,WORK+1936,WORK+2022
  FCB   0       ; CASE 4,2
  FDB   0
  FDB   WORK+87,WORK+474,WORK+861,WORK+1248
  FDB   WORK+2022,WORK+2409,WORK+2796,WORK+3183
  FDB   WORK+1549,WORK+1592,WORK+1678,WORK+1721
  FDB   WORK+1764,WORK+1807,WORK+1850,WORK+1893
  FDB   WORK+1162,WORK+1205,WORK+1936,WORK+1979
  FCB   0       ; CASE 4,3
  FDB   0
  FDB   WORK+130,WORK+517,WORK+904,WORK+1291
  FDB   WORK+2065,WORK+2452,WORK+2839,WORK+3226
  FDB   WORK+1549,WORK+1592,WORK+1635,WORK+1721
  FDB   WORK+1764,WORK+1807,WORK+1850,WORK+1893
  FDB   WORK+1334,WORK+1377,WORK+2108,WORK+2151
  FCB   0       ; CASE 4,4
  FDB   0
  FDB   WORK+173,WORK+560,WORK+947,WORK+1334
  FDB   WORK+2108,WORK+2495,WORK+2882,WORK+3269
  FDB   WORK+1549,WORK+1592,WORK+1635,WORK+1678
  FDB   WORK+1764,WORK+1807,WORK+1850,WORK+1893
  FDB   WORK+1291,WORK+1377,WORK+2065,WORK+2151
  FCB   0       ; CASE 4,5
  FDB   0
  FDB   WORK+216,WORK+603,WORK+990,WORK+1377
  FDB   WORK+2151,WORK+2538,WORK+2925,WORK+3312
  FDB   WORK+1549,WORK+1592,WORK+1635,WORK+1678
  FDB   WORK+1721,WORK+1807,WORK+1850,WORK+1893
  FDB   WORK+1291,WORK+1334,WORK+2065,WORK+2108
  FCB   0       ; CASE 4,6
  FDB   0
  FDB   WORK+259,WORK+646,WORK+1033,WORK+1420
  FDB   WORK+2194,WORK+2581,WORK+2968,WORK+3355
  FDB   WORK+1549,WORK+1592,WORK+1635,WORK+1678
  FDB   WORK+1721,WORK+1764,WORK+1850,WORK+1893
  FDB   WORK+1463,WORK+1506,WORK+2237,WORK+2280
  FCB   0       ; CASE 4,7
  FDB   0
  FDB   WORK+302,WORK+689,WORK+1076,WORK+1463
  FDB   WORK+2237,WORK+2624,WORK+3011,WORK+3398
  FDB   WORK+1549,WORK+1592,WORK+1635,WORK+1678
  FDB   WORK+1721,WORK+1764,WORK+1807,WORK+1893
  FDB   WORK+1420,WORK+1506,WORK+2194,WORK+2280
  FCB   0       ; CASE 4,8
  FDB   0
  FDB   WORK+345,WORK+732,WORK+1119,WORK+1506
  FDB   WORK+2280,WORK+2667,WORK+3054,WORK+3441
  FDB   WORK+1549,WORK+1592,WORK+1635,WORK+1678
  FDB   WORK+1721,WORK+1764,WORK+1807,WORK+1850
  FDB   WORK+1420,WORK+1463,WORK+2194,WORK+2237
  FCB   0       ; CASE 5,0
  FDB   0
  FDB   WORK+1,WORK+388,WORK+775,WORK+1162
  FDB   WORK+1549,WORK+2323,WORK+2710,WORK+3097
  FDB   WORK+1979,WORK+2022,WORK+2065,WORK+2108
  FDB   WORK+2151,WORK+2194,WORK+2237,WORK+2280
  FDB   WORK+1205,WORK+1248,WORK+1592,WORK+1635
  FCB   0       ; CASE 5,1
  FDB   0
  FDB   WORK+44,WORK+431,WORK+818,WORK+1205
  FDB   WORK+1592,WORK+2366,WORK+2753,WORK+3140
  FDB   WORK+1936,WORK+2022,WORK+2065,WORK+2108
  FDB   WORK+2151,WORK+2194,WORK+2237,WORK+2280
  FDB   WORK+1162,WORK+1248,WORK+1549,WORK+1635
  FCB   0       ; CASE 5,2
  FDB   0
  FDB   WORK+87,WORK+474,WORK+861,WORK+1248
  FDB   WORK+1635,WORK+2409,WORK+2796,WORK+3183
  FDB   WORK+1936,WORK+1979,WORK+2065,WORK+2108
  FDB   WORK+2151,WORK+2194,WORK+2237,WORK+2280
  FDB   WORK+1162,WORK+1205,WORK+1549,WORK+1592
  FCB   0       ; CASE 5,3
  FDB   0
  FDB   WORK+130,WORK+517,WORK+904,WORK+1291
  FDB   WORK+1678,WORK+2452,WORK+2839,WORK+3226
  FDB   WORK+1936,WORK+1979,WORK+2022,WORK+2108
  FDB   WORK+2151,WORK+2194,WORK+2237,WORK+2280
  FDB   WORK+1334,WORK+1377,WORK+1721,WORK+1764
  FCB   0       ; CASE 5,4
  FDB   0
  FDB   WORK+173,WORK+560,WORK+947,WORK+1334
  FDB   WORK+1721,WORK+2495,WORK+2882,WORK+3269
  FDB   WORK+1936,WORK+1979,WORK+2022,WORK+2065
  FDB   WORK+2151,WORK+2194,WORK+2237,WORK+2280
  FDB   WORK+1291,WORK+1377,WORK+1678,WORK+1764
  FCB   0       ; CASE 5,5
  FDB   0
  FDB   WORK+216,WORK+603,WORK+990,WORK+1377
  FDB   WORK+1764,WORK+2538,WORK+2925,WORK+3312
  FDB   WORK+1936,WORK+1979,WORK+2022,WORK+2065
  FDB   WORK+2108,WORK+2194,WORK+2237,WORK+2280
  FDB   WORK+1291,WORK+1334,WORK+1678,WORK+1721
  FCB   0       ; CASE 5,6
  FDB   0
  FDB   WORK+259,WORK+646,WORK+1033,WORK+1420
  FDB   WORK+1807,WORK+2581,WORK+2968,WORK+3355
  FDB   WORK+1936,WORK+1979,WORK+2022,WORK+2065
  FDB   WORK+2108,WORK+2151,WORK+2237,WORK+2280
  FDB   WORK+1463,WORK+1506,WORK+1850,WORK+1893
  FCB   0       ; CASE 5,7
  FDB   0
  FDB   WORK+302,WORK+689,WORK+1076,WORK+1463
  FDB   WORK+1850,WORK+2624,WORK+3011,WORK+3398
  FDB   WORK+1936,WORK+1979,WORK+2022,WORK+2065
  FDB   WORK+2108,WORK+2151,WORK+2194,WORK+2280
  FDB   WORK+1420,WORK+1506,WORK+1807,WORK+1893
  FCB   0       ; CASE 5,8
  FDB   0
  FDB   WORK+345,WORK+732,WORK+1119,WORK+1506
  FDB   WORK+1893,WORK+2667,WORK+3054,WORK+3441
  FDB   WORK+1936,WORK+1979,WORK+2022,WORK+2065
  FDB   WORK+2108,WORK+2151,WORK+2194,WORK+2237
  FDB   WORK+1420,WORK+1463,WORK+1807,WORK+1850
  FCB   0       ; CASE 6,0
  FDB   0
  FDB   WORK+1,WORK+388,WORK+775,WORK+1162
  FDB   WORK+1549,WORK+1936,WORK+2710,WORK+3097
  FDB   WORK+2366,WORK+2409,WORK+2452,WORK+2495
  FDB   WORK+2538,WORK+2581,WORK+2624,WORK+2667
  FDB   WORK+2753,WORK+2796,WORK+3140,WORK+3183
  FCB   0       ; CASE 6,1
  FDB   0
  FDB   WORK+44,WORK+431,WORK+818,WORK+1205
  FDB   WORK+1592,WORK+1979,WORK+2753,WORK+3140
  FDB   WORK+2323,WORK+2409,WORK+2452,WORK+2495
  FDB   WORK+2538,WORK+2581,WORK+2624,WORK+2667
  FDB   WORK+2710,WORK+2796,WORK+3097,WORK+3183
  FCB   0       ; CASE 6,2
  FDB   0
  FDB   WORK+87,WORK+474,WORK+861,WORK+1248
  FDB   WORK+1635,WORK+2022,WORK+2796,WORK+3183
  FDB   WORK+2323,WORK+2366,WORK+2452,WORK+2495
  FDB   WORK+2538,WORK+2581,WORK+2624,WORK+2667
  FDB   WORK+2710,WORK+2753,WORK+3097,WORK+3140
  FCB   0       ; CASE 6,3
  FDB   0
  FDB   WORK+130,WORK+517,WORK+904,WORK+1291
  FDB   WORK+1678,WORK+2065,WORK+2839,WORK+3226
  FDB   WORK+2323,WORK+2366,WORK+2409,WORK+2495
  FDB   WORK+2538,WORK+2581,WORK+2624,WORK+2667
  FDB   WORK+2882,WORK+2925,WORK+3269,WORK+3312
  FCB   0       ; CASE 6,4
  FDB   0
  FDB   WORK+173,WORK+560,WORK+947,WORK+1334
  FDB   WORK+1721,WORK+2108,WORK+2882,WORK+3269
  FDB   WORK+2323,WORK+2366,WORK+2409,WORK+2452
  FDB   WORK+2538,WORK+2581,WORK+2624,WORK+2667
  FDB   WORK+2839,WORK+2925,WORK+3226,WORK+3312
  FCB   0       ; CASE 6,5
  FDB   0
  FDB   WORK+216,WORK+603,WORK+990,WORK+1377
  FDB   WORK+1764,WORK+2151,WORK+2925,WORK+3312
  FDB   WORK+2323,WORK+2366,WORK+2409,WORK+2452
  FDB   WORK+2495,WORK+2581,WORK+2624,WORK+2667
  FDB   WORK+2839,WORK+2882,WORK+3226,WORK+3269
  FCB   0       ; CASE 6,6
  FDB   0
  FDB   WORK+259,WORK+646,WORK+1033,WORK+1420
  FDB   WORK+1807,WORK+2194,WORK+2968,WORK+3355
  FDB   WORK+2323,WORK+2366,WORK+2409,WORK+2452
  FDB   WORK+2495,WORK+2538,WORK+2624,WORK+2667
  FDB   WORK+3011,WORK+3054,WORK+3398,WORK+3441
  FCB   0       ; CASE 6,7
  FDB   0
  FDB   WORK+302,WORK+689,WORK+1076,WORK+1463
  FDB   WORK+1850,WORK+2237,WORK+3011,WORK+3398
  FDB   WORK+2323,WORK+2366,WORK+2409,WORK+2452
  FDB   WORK+2495,WORK+2538,WORK+2581,WORK+2667
  FDB   WORK+2968,WORK+3054,WORK+3355,WORK+3441
  FCB   0       ; CASE 6,8
  FDB   0
  FDB   WORK+345,WORK+732,WORK+1119,WORK+1506
  FDB   WORK+1893,WORK+2280,WORK+3054,WORK+3441
  FDB   WORK+2323,WORK+2366,WORK+2409,WORK+2452
  FDB   WORK+2495,WORK+2538,WORK+2581,WORK+2624
  FDB   WORK+2968,WORK+3011,WORK+3355,WORK+3398
  FCB   0       ; CASE 7,0
  FDB   0
  FDB   WORK+1,WORK+388,WORK+775,WORK+1162
  FDB   WORK+1549,WORK+1936,WORK+2323,WORK+3097
  FDB   WORK+2753,WORK+2796,WORK+2839,WORK+2882
  FDB   WORK+2925,WORK+2968,WORK+3011,WORK+3054
  FDB   WORK+2366,WORK+2409,WORK+3140,WORK+3183
  FCB   0       ; CASE 7,1
  FDB   0
  FDB   WORK+44,WORK+431,WORK+818,WORK+1205
  FDB   WORK+1592,WORK+1979,WORK+2366,WORK+3140
  FDB   WORK+2710,WORK+2796,WORK+2839,WORK+2882
  FDB   WORK+2925,WORK+2968,WORK+3011,WORK+3054
  FDB   WORK+2323,WORK+2409,WORK+3097,WORK+3183
  FCB   0       ; CASE 7,2
  FDB   0
  FDB   WORK+87,WORK+474,WORK+861,WORK+1248
  FDB   WORK+1635,WORK+2022,WORK+2409,WORK+3183
  FDB   WORK+2710,WORK+2753,WORK+2839,WORK+2882
  FDB   WORK+2925,WORK+2968,WORK+3011,WORK+3054
  FDB   WORK+2323,WORK+2366,WORK+3097,WORK+3140
  FCB   0       ; CASE 7,3
  FDB   0
  FDB   WORK+130,WORK+517,WORK+904,WORK+1291
  FDB   WORK+1678,WORK+2065,WORK+2452,WORK+3226
  FDB   WORK+2710,WORK+2753,WORK+2796,WORK+2882
  FDB   WORK+2925,WORK+2968,WORK+3011,WORK+3054
  FDB   WORK+2495,WORK+2538,WORK+3269,WORK+3312
  FCB   0       ; CASE 7,4
  FDB   0
  FDB   WORK+173,WORK+560,WORK+947,WORK+1334
  FDB   WORK+1721,WORK+2108,WORK+2495,WORK+3269
  FDB   WORK+2710,WORK+2753,WORK+2796,WORK+2839
  FDB   WORK+2925,WORK+2968,WORK+3011,WORK+3054
  FDB   WORK+2452,WORK+2538,WORK+3226,WORK+3312
  FCB   0       ; CASE 7,5
  FDB   0
  FDB   WORK+216,WORK+603,WORK+990,WORK+1377
  FDB   WORK+1764,WORK+2151,WORK+2538,WORK+3312
  FDB   WORK+2710,WORK+2753,WORK+2796,WORK+2839
  FDB   WORK+2882,WORK+2968,WORK+3011,WORK+3054
  FDB   WORK+2452,WORK+2495,WORK+3226,WORK+3269
  FCB   0       ; CASE 7,6
  FDB   0
  FDB   WORK+259,WORK+646,WORK+1033,WORK+1420
  FDB   WORK+1807,WORK+2194,WORK+2581,WORK+3355
  FDB   WORK+2710,WORK+2753,WORK+2796,WORK+2839
  FDB   WORK+2882,WORK+2925,WORK+3011,WORK+3054
  FDB   WORK+2624,WORK+2667,WORK+3398,WORK+3441
  FCB   0       ; CASE 7,7
  FDB   0
  FDB   WORK+302,WORK+689,WORK+1076,WORK+1463
  FDB   WORK+1850,WORK+2237,WORK+2624,WORK+3398
  FDB   WORK+2710,WORK+2753,WORK+2796,WORK+2839
  FDB   WORK+2882,WORK+2925,WORK+2968,WORK+3054
  FDB   WORK+2581,WORK+2667,WORK+3355,WORK+3441
  FCB   0       ; CASE 7,8
  FDB   0
  FDB   WORK+345,WORK+732,WORK+1119,WORK+1506
  FDB   WORK+1893,WORK+2280,WORK+2667,WORK+3441
  FDB   WORK+2710,WORK+2753,WORK+2796,WORK+2839
  FDB   WORK+2882,WORK+2925,WORK+2968,WORK+3011
  FDB   WORK+2581,WORK+2624,WORK+3355,WORK+3398
  FCB   0       ; CASE 8,0
  FDB   0
  FDB   WORK+1,WORK+388,WORK+775,WORK+1162
  FDB   WORK+1549,WORK+1936,WORK+2323,WORK+2710
  FDB   WORK+3140,WORK+3183,WORK+3226,WORK+3269
  FDB   WORK+3312,WORK+3355,WORK+3398,WORK+3441
  FDB   WORK+2366,WORK+2409,WORK+2753,WORK+2796
  FCB   0       ; CASE 8,1
  FDB   0
  FDB   WORK+44,WORK+431,WORK+818,WORK+1205
  FDB   WORK+1592,WORK+1979,WORK+2366,WORK+2753
  FDB   WORK+3097,WORK+3183,WORK+3226,WORK+3269
  FDB   WORK+3312,WORK+3355,WORK+3398,WORK+3441
  FDB   WORK+2323,WORK+2409,WORK+2710,WORK+2796
  FCB   0       ; CASE 8,2
  FDB   0
  FDB   WORK+87,WORK+474,WORK+861,WORK+1248
  FDB   WORK+1635,WORK+2022,WORK+2409,WORK+2796
  FDB   WORK+3097,WORK+3140,WORK+3226,WORK+3269
  FDB   WORK+3312,WORK+3355,WORK+3398,WORK+3441
  FDB   WORK+2323,WORK+2366,WORK+2710,WORK+2753
  FCB   0       ; CASE 8,3
  FDB   0
  FDB   WORK+130,WORK+517,WORK+904,WORK+1291
  FDB   WORK+1678,WORK+2065,WORK+2452,WORK+2839
  FDB   WORK+3097,WORK+3140,WORK+3183,WORK+3269
  FDB   WORK+3312,WORK+3355,WORK+3398,WORK+3441
  FDB   WORK+2495,WORK+2538,WORK+2882,WORK+2925
  FCB   0       ; CASE 8,4
  FDB   0
  FDB   WORK+173,WORK+560,WORK+947,WORK+1334
  FDB   WORK+1721,WORK+2108,WORK+2495,WORK+2882
  FDB   WORK+3097,WORK+3140,WORK+3183,WORK+3226
  FDB   WORK+3312,WORK+3355,WORK+3398,WORK+3441
  FDB   WORK+2452,WORK+2538,WORK+2839,WORK+2925
  FCB   0       ; CASE 8,5
  FDB   0
  FDB   WORK+216,WORK+603,WORK+990,WORK+1377
  FDB   WORK+1764,WORK+2151,WORK+2538,WORK+2925
  FDB   WORK+3097,WORK+3140,WORK+3183,WORK+3226
  FDB   WORK+3269,WORK+3355,WORK+3398,WORK+3441
  FDB   WORK+2452,WORK+2495,WORK+2839,WORK+2882
  FCB   0       ; CASE 8,6
  FDB   0
  FDB   WORK+259,WORK+646,WORK+1033,WORK+1420
  FDB   WORK+1807,WORK+2194,WORK+2581,WORK+2968
  FDB   WORK+3097,WORK+3140,WORK+3183,WORK+3226
  FDB   WORK+3269,WORK+3312,WORK+3398,WORK+3441
  FDB   WORK+2624,WORK+2667,WORK+3011,WORK+3054
  FCB   0       ; CASE 8,7
  FDB   0
  FDB   WORK+302,WORK+689,WORK+1076,WORK+1463
  FDB   WORK+1850,WORK+2237,WORK+2624,WORK+3011
  FDB   WORK+3097,WORK+3140,WORK+3183,WORK+3226
  FDB   WORK+3269,WORK+3312,WORK+3355,WORK+3441
  FDB   WORK+2581,WORK+2667,WORK+2968,WORK+3054
  FCB   0       ; CASE 8,8
  FDB   0
  FDB   WORK+345,WORK+732,WORK+1119,WORK+1506
  FDB   WORK+1893,WORK+2280,WORK+2667,WORK+3054
  FDB   WORK+3097,WORK+3140,WORK+3183,WORK+3226
  FDB   WORK+3269,WORK+3312,WORK+3355,WORK+3398
  FDB   WORK+2581,WORK+2624,WORK+2968,WORK+3011
  FDB   -1      ; sentinel
 
***************************************
* Notre propre pile car celle en place
* n'est peut-etre pas assez grosse.
***************************************
STACKEND
  BRN   STACKEND
  RMB   81*5+64+2048,0
STACKTOP
***************************************
* Quelques infos
***************************************
  ECHO  START        = $INI
  ECHO  SOLVE        = $SOLVE
  ECHO  Debug Solv   = &DEBUG
  ECHO  Debug Gener  = &DBGEN
  ECHO  Taille Algo  = &RND-SOLVE
  ECHO  Taille Work  = &STACKEND-WORK
  ECHO  Taille Stack = &STACKTOP-STACKEND bytes
  
  END   INI
