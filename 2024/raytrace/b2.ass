(main)B2

USE_XTRA equ   0
INL_MOV  equ   1

TIMEPT   equ   $6027
STATUS   equ   $6019
FORME    equ   $6038
CHDRAW   equ   $6041
PTGENE   equ   $60CF

PUTC     equ   $E803
EXTRA    equ   $EC0C
SETP     equ   $EC00
*PLOT     equ   $E80F
KBIN     equ   $E830

DBLFLG   equ   $6103
VALTYP   equ   $6105

FACEXP   equ   $614E
FACHO    equ   $614F
FACMO    equ   $6150
FACLO    equ   $6151
FACSGN   equ   $6156

ARGEXP   equ   $6159
ARGHO    equ   $615A
ARGMO    equ   $615B
ARGLO    equ   $615C
ARGSGN   equ   $6161

ldab     macro
         ldd   #(\0)*256+\1
         endm

clrd     macro
*         clrb
*         clra
         ldab  0,0
         endm
         
         setdp $61

         org   $9000
         
*defusr   pshs  a,dp,x
*         jsr   fastInvSqrt
*         puls  a,dp,x,pc

ini      pshs  dp
         ifne  USE_XTRA
* init extramon + math         
         ldd   #$6104
         tfr   a,dp
         stb   <VALTYP
         clr   <DBLFLG         
         ldb   #1
         jsr   EXTRA
         endc
* init screen
         ldx   #palette
         lda   #$FF
         jsr   SETP
         ldx   #inistr
         jsr   puts        
* init conversion entier->float
         ldd   #319
         ldx   #fCoord+320*2
fCo1     pshs  d
         std   ,--x
         lda   #$90
         ldb   ,x
fCo2     deca
         lsl   1,x
         rolb
         bpl   fCo2
         std   ,x
         puls  d 
         subd  #1
         bne   fCo1
         std   ,--x
* init timer         
         ldd   #timert
         std   >TIMEPT
         ldb   #$20
         orb   >STATUS
         stb   >STATUS
         andcc #255-$50    ; enable interrupts
         clrd
         std   <fI+2
         stb   >CHDRAW
         std   <iTime      ; rester time counter
         
* init pseudo-random point generator         
         std   <iRnd
newpx    jmp   calcXY
drwpx    stb   FORME
         ldx   <iX
         ldy   <iY
         jsr   PLOT        
nxtpx    ldd   <iRnd
nxrnd    lslb
         rola
         lslb
         rola
         addd  <iRnd
         addd  #1
         anda  #127
         std   <iRnd
         beq   done
         cmpd  #32000
         bcc   nxrnd
         bra   newpx

done     ldx   #0
         leay  ,x
         jsr   prtTime

loop     jmp   loop
   
         puls  dp,pc

calcXY    
         ifne 0
         
         std   <ARGMO
         ldd   #200
         jsr   idivmod
         std   <iX
         lslb
         rola
         std   <i2X
         ldd   <ARGMO
         std   <iY
         
         else
* fait gagner 15sec environ
         ldx   #0
calcXY1  cmpa  #100
         bcs   calcXY2
         suba  #100
         leax  128,x
calcXY2  cmpa  #50
         bcs   calcXY3
         suba  #50
         leax  64,x
calcXY3  cmpa  #25
         bcs   calcXY4
         suba  #25
         leax  32,x
calcXY4  cmpd  #3200
         bcs   calcXY5
         subd  #3200
         leax  16,x
calcXY5  cmpd  #1600
         bcs   calcXY6
         subd  #1600
         leax  8,x
calcXY6  cmpd  #800
         bcs   calcXY7
         subd  #800
         leax  4,x
calcXY7  cmpd  #400
         bcs   calcXY8
         subd  #400
         leax  2,x
calcXY8  cmpd  #200
         bcs   calcXY9
         subd  #200
         leax  1,x
calcXY9  exg   d,x
         std   <iX
         lslb
         rola
         std   <i2X
         tfr   x,d
         std   <iY         
         
         endc
         
         sta   fX
         
         ldu   #c_m0p1
         pulu  d,x
         std   fY
         stx   fY+2
         
         pulu  d,x      ; c_3
         std   fZ
         stx   fZ+2

         bra   calcUVW
         
calcUV_  pshs  x
         ldx   #fCoord
         lslb
         rola
         ldd   d,x
         std   <FACEXP
         clrd
         std   <FACMO
         sta   <FACSGN
         puls  x
         jsr   fsuba
         ldx   #c_1o130
         jmp   fmula

fneg     macro
         com  <FACSGN
         endm
         
calcUVW  ldd   <i2X
         ldx   #c_159p5
         bsr   calcUV_
         fneg
         ldx   #fU
         jsr   movmf    ; U = (2M-159.5)/130
         
         ldd   <iY
         ldx   #c_99p5
         bsr   calcUV_
         ldx   #fV
         jsr   movmf    ; V = (99.5-N)/130
         
         jsr   fsqr
         ldx   #fT
         jsr   movmf    ; T=V*V
         ldx   #fU
         jsr   movfm
         jsr   fsqr     
         ldx   #fT
         jsr   fadda    ; FAC=V*V+U*U
         ldx   #c_1
         jsr   fadda    ; FAC=V*V+U*U+1
         jsr   f1osqrt
         ldx   #fW
         jsr   movmf    ; W = 1/sqrt(1+U*U+V*V)
         
         ldx   #fV
         jsr   fmulm    ; V=V*W
         
         ldx   #fW
         jsr   movfm
         ldx   #fU
         jsr   fmulm    ; U=U*W
         
*        bra   spheres
 
sph_w    equ   48
sph_h    equ   48
 
spheres  ldx   #c_sph-6
         leax  6,x
         ldd   ,x
         bge   *+4
         bra   no_sphere
         subd  <i2X
         bge   *+3
         negb
         cmpb  #sph_w
         bhi   spheres+3
         ldd   2,x
         bne   *+4
         bra   no_sphere
         subd  <iY
         bge   *+3
         negb
         cmpb  #sph_h
         bhi   spheres+3
         ldd   4,x
         std   <fI         
         bra   sphere_bounce
no_sphere
         jmp   ground_or_sky
                  
sphere_EFP
         ldx   #fI
         jsr   movfm
         ldx   #fX
         jsr   fadda
         ldx   #fE
         jsr   movmf    ; E=X+I
         
         ldx   #fI
         jsr   movfm
         ldx   #fY
         jsr   fadda
         ldx   #fF
         jsr   movmf    ; F=Y+I

         ldx   #fV
         jsr   fmula
         ldx   #fP
         jsr   movmf    ; P=V*F
         
         ldx   #fU
         jsr   movfm
         ldx   #fE
         jsr   fmula
         ldx   #fP
         jsr   faddm    ; P += U*E
         
         ldx   #fW
         jsr   movfm
         ldx   #fZ
         jsr   fmula    ; FAC=W*Z
         ldx   #fP
         jmp   fsubm    ; P=V*F + U*E - W*Z

ftst     ldb   <FACEXP
         beq   ftst1
         ldb   <FACSGN
         orb   #127
ftst1    rts

sphere_bounce
         bsr   sphere_EFP
         
         jsr   fsqr
         ldx   #fT
         jsr   movmf    ; T=P*P
         
         ldx   #fE
         jsr   movfm
         jsr   fsqr
         ldx   #fT
         jsr   fsubm    ; T -= E*E
         
         ldx   #fF
         jsr   movfm
         jsr   fsqr
         ldx   #fT
         jsr   fsubm    ; T -= F*F
         
         ldx   #fZ
         jsr   movfm
         jsr   fsqr

         ldx   #c_1
         jsr   fsuba    ; 1 - Z*Z

         ldx   #fT
         jsr   faddm    ; T = P*P - E*E - F*F - Z*Z + 1
         
         bsr   ftst     
         bgt   *+5      ; IF T>0 THEN
         jmp   ground_or_sky

         jsr   fsqrt
         ldx   #fP
         jsr   fadda 
         fneg
         ldx   #fT
         jsr   movmf    ; T = -(P + SQR(T))
         
         bsr   ftst   
         bgt   *+5      ; IF T>0 THEN
         jmp   ground_or_sky
         
         ldx   #fU
         jsr   fmula
         ldx   #fX
         jsr   faddm    ; X=X+U*T

         ldx   #fT
         jsr   movfm
 
         ldx   #fV
         jsr   fmula
         ldx   #fY
         jsr   faddm    ; Y=Y+V*T

         ldx   #fT
         jsr   movfm
         
         ldx   #fW
         jsr   fmula
         ldx   #fZ
         jsr   fsubm    ; Z=Z-W*T
         
         jsr   sphere_EFP
         
         ldx   #fP
*         ldb   ,x
*         beq   *+4
         inc   ,x      ; P=2*P
         
         jsr   movfm
         ldx   #fE
         jsr   fmula
         ldx   #fU
         jsr   fsubm    ; U=U-P*E
         
         ldx   #fP
         jsr   movfm
         ldx   #fF
         jsr   fmula
         ldx   #fV
         jsr   fsubm    ; V=V-P*F
         
         ldx   #fP
         jsr   movfm
         ldx   #fZ
         jsr   fmula
         ldx   #fW
         jsr   faddm    ; W=W+P*Z
         
         ldx   #fI+1
         ldb   #128
         eorb  ,x
         stb   ,x       ; I=-I
         jmp   sphere_bounce         

ground_or_sky         
         ldb   fV+1
         bmi   ground
sky
         ldx   #fV
         jsr   movfm
         jsr   fsqrt
         ldx   #c_7
         jsr   fmula     
         ldx   #fV
         jsr   movmf    ; V=7*sqrt(V)
         bra   calcCOL
ground         
         ldx   #fY
         jsr   movfm
         ldx   #c_2
         jsr   fadda
         jsr   movaf
         ldx   #fV
         jsr   movfm
         jsr   fdiv     
         ldx   #fP
         jsr   movmf    ; P=(Y+2)/V
         
         ldx   #fU
         jsr   fmula
         ldx   #fX
         jsr   fsuba
         jsr   floor
*         jsr   ftoi     ; d = int(X-U*P)
*         stb   ,-s
         ldx   #fT
         jsr   movmf
         
         ldx   #fP
         jsr   movfm
         
         ldx   #fW
         jsr   fmula
         ldx   #fZ
         jsr   fsuba
         jsr   floor
*         jsr   ftoi     ; d = int(X-W*Z)
*         eorb  ,s
*         andb  #1
*         stb   ,s
         ldx   #fT
         jsr   fadda
         jsr   ftoi
         ldx   #ground0
         lsrb
         bcc   *+5
         ldx   #ground1
         stx   <dalle+1,pcr
         
         ldx   #fV
         jsr   movfm
         fneg
         jsr   fsqrt
         ldb   <FACEXP
*        beq   *+6
         addb  #2
         stb   <FACEXP  ; FAC=4*SQRT(-V)
         
dalle    ldx   #ground0
         jsr   fadda
         ldx   #fV      
         jsr   movmf    ; V=8+5*((INT(X-U*P)+INT(Z-W*P))AND1)+4*SQR(-V)
*         bra   calcCOL
         
calcCOL  ldx   #vac
         ldb   <iY+1
         andb  #7
         lslb
         abx
         ldab  16,7
         andb  <iX+1
         mul
         ldd   d,x
         stb   <FACSGN
         orb   #128
         std   <FACEXP
         clrd
         std   <FACMO
         ldx   #fV
         jsr   faddm
         jsr   ftoi
         ldx   #cols
         ldb   b,X
         jmp   drwpx
                  
movam    ldd   ,x
         stb   <ARGSGN
         orb   #128
         std   <ARGEXP
         lda   2,x
         sta   <ARGMO
         rts       

         ifne  USE_XTRA
movfm    ldb   #62
         jmp   >EXTRA         
         else
movfm    ldd   ,x
         stb   <FACSGN
         orb   #128
         std   <FACEXP
         lda   2,x
         sta   <FACMO
         rts    
         endc

         ifne  USE_XTRA
movmf    ldb   #63
         jmp   >EXTRA
         else
movmf    lda   <FACEXP
         bne   *+5
         sta   ,x
         rts
         ldb   <FACSGN
         orb   #127
         andb  <FACHO
         std   ,x
         lda   <FACMO
         sta   2,x
         rts
         endc

         ifne  USE_XTRA
movaf    ldb   #64
         jmp   >EXTRA
         else
movaf    ldd   <FACEXP
         std   <ARGEXP
         lda   <FACMO
         sta   <ARGMO
         lda   <FACSGN
         sta   <ARGSGN
         rts
         endc

         ifne  USE_XTRA
f1osqrt  bsr   fsqrt
         ldx   #c_1
         bsr   movam
         bra   fdiv        
         else
f1osqrt  pshs  x
         leas  -8,s         
         leax  4,s
         clra
         sta   <FACSGN
         bsr   movmf
               
         ldd   <FACEXP
         suba  #2       ; make bias = 127
         lslb           ; |
         lsra           ; | make ieee
         rorb           ; | 
      
         lsra           ; |
         rorb           ; |
         ror   <FACMO   ; | i>>1
         std   <FACEXP  ; |
         
         lda   #$5b    ;  $5F375A86 - (i>>1)
         suba  <FACMO
         sta   <FACMO
         
         ldd   #$6037   ; includes bias correction
         sbcb  <FACHO
         sbca  <FACEXP

         addb  #128     ; extract msbit -> carry
         rola           ; move carry to a
         orb   #128     ; set msbit
         std   <FACEXP
  
         leax  ,s
         jsr   movmf    ; save y on stack
         bsr   fsqr     ; y*y
         leax  4,s
         bsr   fmula    ; x*y*y
         ldx   #c_3
         jsr   fsuba    ; 3 - x*y*y
         dec   <FACEXP  ; 1.5 - y*y*x/2
         leax  ,s
         bsr   fmula    ; y*(1.5 - x*y*y/2)

         leas  8,s
         puls  x,pc
         endc

         ifne  USE_XTRA
fsqrt    ldb   #44
         jmp   >EXTRA
         else
fsqrt    pshs  x
         leas  -4,s
         leax  ,s
         jsr   movmf
         bsr   f1osqrt
         leax  ,s
         jsr   fmula
         leas  4,s
         puls  x,pc
         endc

         ifne  USE_XTRA
fdiv     ldb   #57            ; 23:11
         jmp   >EXTRA
         else
fdiv     lda   <ARGEXP
         bne   fdiv2
         sta   <FACEXP
         rts
fdiv2    pshs  x
         leas  -4,s
         ldb   <ARGSGN
         eorb  <FACSGN
         orb   #127
         andb  <ARGHO
         std   ,s
         lda   <ARGMO
         sta   2,S
         bsr   f1osqrt
         jsr   fsqr
         leax  ,s
         jsr   fmula
         leas  4,s       
         puls  x,pc
         endc

         ifne  USE_XTRA
fsqr     jsr   movaf         
         bra   fmul
         else
fsqr     lda   <FACEXP
         beq   fmul0+2
         suba  #$80
         asla
         bvs   fmulOvf
         adda  #$80
         sta   <FACEXP         
         ldd   <FACHO
         mul         
         lslb
         rola
         sta   <FACMO
         lda   <FACHO
         ldb   #0
         rolb   
         stb   <FACHO
         stb   <FACSGN
         tfr   a,b
         mul
         addd  <FACHO
         bpl   fmul1
         std   <FACHO
         rts
         endc
                  
         ifne  USE_XTRA
fmula    jsr   movam
*        bra   fmul
fmul     ldb   #56
         jmp   >EXTRA
         else
fmulOvf  tfr   a,b      ;
         sex   
fmul0    sta   <FACEXP
         rts       
* multiplication with 16 bit mantissa
fmula    ldd   ,x
         stb   <ARGSGN
         orb   #128
         std   <ARGEXP
         lda   2,x
         sta   <ARGMO
*        bra   fmul
fmul     lda   <FACEXP
         beq   fmul0+2
         suba  #$80
         sta   <FACEXP

         lda   <ARGEXP
         beq   fmul0

         suba  #$80
         adda  <FACEXP
         bvs   fmulOvf
         adda  #$80
         sta   <FACEXP
         
         lda   <ARGSGN
         eora  <FACSGN
         sta   <FACSGN
         
         lda   <FACMO
         ldb   <ARGHO
         mul
         adca  #0
         sta   <FACMO

         ldb   <ARGMO
         lda   <FACHO
         mul
         adca  <FACMO
         sta   <FACMO
      
         lda   <FACHO
         ldb   #0        * move carry to FACHO
         rolb            
         stb   <FACHO
         
         ldb   <ARGHO           
         mul                     
         addd  <FACHO
         bmi   fmul2
fmul1    dec   <FACEXP
         beq   fmul2    ; underflow
         lslb
         rola
         bpl   fmul1
fmul2    std   <FACHO
         rts
         endc

fsubm    bsr   fsuba
         jmp   movmf

faddm    bsr   fadda
         jmp   movmf         
            
fadda    jsr   movam
         bra   fadd
         
fmulm    bsr   fmula
         jmp   movmf
         
fsuba    jsr   movam
*        jmp   fsub

         ifne  USE_XTRA
fsub     ldb   #55         
         jmp   >EXTRA
         else
fsub     com   <FACSGN     ; ARG - FAC
*        bra   fadd
         endc

         ifne  USE_XTRA
fadd     ldb   #54
         jmp   >EXTRA
         else
fadd     ldb   <ARGEXP     ; ARG + FAC
         bne   *+3
         rts
         
         subb  <FACEXP     ; determine which is bigger
         bne   fadd1
         ldd   <ARGHO
         subd  <FACHO
         bne   fadd1

* same expo and same mantissa
         ldb   <FACSGN
         eorb  <ARGSGN
         bmi   fadd0       ; if not same sign => yield 0      
         inc   <FACEXP     ; otherwise => yield 2FAC
         rts
fadd0    sta   <FACEXP     ; zero
         rts

* mantissa is different; C=1 indicates |FAC| > |ARG|
fadd1    pshs  x
         lda   <FACSGN
         eora  <ARGSGN
         sta   <ARGLO      ; add or sub ?
         
         ldx   <ARGHO
         bcc   fadd_cpy
         
         ldb   <FACEXP     ; FAC is bigger
         subb  <ARGEXP

         cmpb  #16         ; expo diff >= 16
         bcs   *+4
         puls  x,pc        ; yes => done
        
fadd2    lda   <ARGLO      ; subtract ?
         bmi   fadds1      ; yes => goto fadds section
* add         
         bsr   fastLSR     ; shift smaller mantissa
         addd  <FACHO
         bcc   fadd_end    ; msb not lost => done
         rora              ; lost => shift right 
         rorb              ; get it back
         inc   <FACEXP     ; fix expo
         bra   fadd_end    ; done
* sub
fadds1   bsr   fastLSR     ; shift smaller mantissa
         nega
         negb
         sbca  #0
         addd  <FACHO
         bmi   fadd_end    ; msb set ? yes => done
fadds2   dec   <FACEXP     ; no => shift left
         beq   fadd_end    ; underflow => done
         lslb
         rola
         bpl   fadds2     ; loop till msb set
fadd_end std   <FACHO
         puls  x,pc
         
fadd_cpy ldd   <FACHO      ; copy mantissa
         stx   <FACHO      
         tfr   d,x

         lda   <ARGSGN     ; copy sign
         sta   <FACSGN
         
         ldb   <ARGEXP     ; ARG is biger
         subb  <FACEXP

         lda   <ARGEXP     ; copy expo
         sta   <FACEXP
         
         cmpb  #16         ; expo diff >= 16
         bcs   fadd2
         puls  x,pc
         endc

         ifne  USE_XTRA
ftoi     ldd   #$0232
         jsr   >EXTRA
         ldb   #4
         stb   <VALTYP
         ldd   <FACMO
         rts
         else
ftoi     ldd   #$8080
         std   <ARGEXP
         clr   <ARGSGN
         bsr   fadd        ; adds .5
         bsr   floor

         ldb   <FACEXP
         bne   *+4
         clra
         rts
         
         subb  #$80
         bhs   ftoi1
         
         ldb   <FACSGN     ; abs(num) <= 1
         sex
         tfr   a,b
         rts               ; $FFFF or $0000

ftoi1    subb  #16
         bcs   ftoi2
         ldd   #$7FFF
         tst   <FACSGN  
         bpl   *+4
         comb
         coma
         rts               ; $8000 or $7FFF
         
ftoi2    pshs  x           ; MANTISSA >> b
         negb
         ldx   <FACHO
         jsr   fastLSR
         tst   <FACSGN
         bpl   ftoi3
         nega
         negb
         sbca  #0
ftoi3    puls  x,pc     
         endc

         ifeq  USE_XTRA
* D = X>>B (logical shift)
fastLSR  pshs  x
         ldx   #fastLSR3
         cmpb  #16
         blt   fastLSR1
         ldd   #0
         jmp   ,x
fastLSR1 negb
         aslb
         leax  b,x
         cmpx  #fastLSR3-16
         bhi   fastLSR2
         clra
         ldb   ,s
         jmp   16,x
fastLSR2 ldd   ,s
         jmp   ,x
         lsra
         rorb
         lsra
         rorb
         lsra
         rorb
         lsra
         rorb
         lsra
         rorb
         lsra
         rorb
         lsra
         rorb
fastLSR3 puls  x,pc    
         endc

         ifne  USE_XTRA
floor    ldb   #42
         jmp   >EXTRA
         else
floor    ldb   <FACEXP
         bne   *+3
         rts
         
         subb  #$81
         bhs   floor1
         
         clra
         ldb   <FACSGN  ; abs(num) <= 1
         bpl   floor0
         sta   <FACMO   
         ldd   #$8180   ; return -1         
floor0   std   <FACEXP
         rts

floor1   cmpb  #16
         bcs   *+3
         rts            ; too big to truncate
         
         pshs  x        ; $8000 >> b
         ldx   #floorT
         lslb
         abx
         ldd   ,x
            
         subd  #1       ; make mask
         anda  <FACHO   ; isolate fraction
         andb  <FACMO
         addd  #0       ; fraction==0 ?
         beq   floor3   ; yes==>exact int, done

         eora  <FACHO   ; mask out fraction
         eorb  <FACMO
         
         tst   <FACSGN  ; no, num>0 ? 
         bpl   floor2   ; yes => done
         addd  ,x       ; no => add 1
         bcc   floor2
         rora           ; overflow
         lsrb           ; shift mantissa
         inc   <FACEXP  ; fix exponent
floor2   std   <FACHO   ; save mantissa
floor3   puls  x,pc
floorT   fdb   $8000,$4000,$2000,$1000
         fdb   $0800,$0400,$0200,$0100
         fdb   $0080,$0040,$0020,$0010
         fdb   $0008,$0004,$0002,$0001
         endc
         
* D = ARG / D and ARG = ARG % D

         ifne  0
         
idivmod  pshs  x,u         
         ldx   #1
idivmod_ tsta
         bmi   idivmod1
         bne   idivmod0
         ldx   #9
         exg   a,b
         bra   idivmod_
idivmod0 leax  1,x
         lslb
         rola
         bpl   idivmod0
idivmod1 std   <FACMO
         ldd   <ARGMO
         ldu   #-1
         stu   <ARGMO
         ldu   #FACMO
idivmod2 cmpd  ,u
         bcs   idivmod3
         subd  ,u
idivmod3 rol   <ARGMO+1
         rol   <ARGMO
         lsr   ,u
         ror   1,u
         leax  -1,x
         bne   idivmod2
         ldx   <ARGMO
         std   <ARGMO
         tfr   x,d
         coma
         comb
         puls  x,u,pc

         else
         
idivmod  pshs  x
         ldx   #16
         std   <idivmod0+4,pcr
         std   <idivmod1-2,pcr
         ldd   #0
         lsl   <ARGMO+1
         rol   <ARGMO
idivmod0 rolb 
         rola
         cmpd  #0
         bcs   idivmod1
         subd  #0
idivmod1 rol   <ARGMO+1
         rol   <ARGMO
         leax  -1,x
         bne   idivmod0
         tfr   d,x
         ldd   <ARGMO
         stx   <ARGMO
         comb 
         coma  
         puls  x,pc
         
         endc

* affiche le temps mm:ss.d      
prtTime  lda   >STATUS
         ldb   >FORME
         pshs  d
         
         ldab  0,255-$20
         sta   >FORME
         andb  >STATUS
         stb   >STATUS        ; arret timer
                  
         ldd   <iTime
         std   <ARGMO
*         ldd   #36000
*         bsr   idivmod
*         bsr   prt10
*         ldb   #':
*         bsr   putc16
         ldd   #600
         bsr   idivmod
         bsr   prt100
         ldb   #'m
         bsr   putc16
         ldd   #10
         bsr   idivmod
         bsr   prt100
         ldb   #'.
         bsr   putc16
         ldb   <ARGMO+1
         bsr   prt10
         puls  d
         sta   >STATUS
         stb   >FORME
         rts
         
prt100   pshs  d
*         lda   1,s
*         clrb
         exg   a,b
prt100a  subd  #2559
         bcc   prt100a
         addd  #2559
         bsr   prt10
         tfr   a,b
         bsr   prt10
         puls  d,pc

* print a decimal
prt10    addb  #'0
*        bra   putc16

* prints a char in bm16
putc16   pshs  u,d,y
         subb  #31
         lda   #8
         mul
         addd  >PTGENE
         tfr   d,u         
         incb        ; sets b0
putc16_0 pshs  x,b
         lda   ,-u
*         lsra
*         ora   ,u
         bra   putc16_3
putc16_1 bsr   PLOT ; destroys B
putc16_2 leax  1,x
         lsla
putc16_3 bmi   putc16_1
         bne   putc16_2
         puls  x,b
         leay  1,y
         lslb        ; loops 8 times
         bne   putc16_0
         leax  8,x   ; next pos
         puls  u,d,y,pc

* faster BM16 version of PLOT ($E80F)
* FORM contains dedoubled color XX
PLOT     pshs  d,x
*         jsr   $E80F
*         puls  d,x,pc

         tfr   y,d      ; calc px address
         lda   #40
         mul
         adda  #$40
         tfr   d,x
         ldb   3,s
         lsrb
         lsrb
         abx
         
         ldb   >$E7C3   ; ramA or ramB ?
         orb   #1
         sbcb  #0
         stb   >$E7C3
         
         ldb   3,s      ; compute mask 
         lsrb           
         ldd   #$0FF0   
         bcc   *+5      
         ldd   #$F00F   
         
         andb  FORME    ; display pixel
         anda  ,x
         sta   ,x
         orb   ,x
         stb   ,x
         puls  d,x,pc
         
* print a string   
puts0    jsr   >PUTC
puts     ldb   ,x+
         bne   puts0
         rts
         
         setdp $ff

* timer routine, called every 1/10 sec
timert   inc   >iTime+1
         bne   timert1
         inc   >iTime+0
timert1  jmp   KBIN
         
   
inistr   fcb   $14      cursor off
         fcb   $1b,$5e  bm16
         fcb   $1b,$60  black border

cols     fcb   0
         fcb   $11,$22,$33,$44,$55,$66,$77
         fcb   $00,$88,$99,$aa,$bb
         fcb   $00,$cc,$dd,$ee,$ff
         
palette  fdb   $000,$100,$200,$500
         fdb   $C00,$C10,$C50,$CC0
         fdb   $010,$020,$050,$0A0
         fdb   $011,$022,$055,$0AA
         
vac      fdb   $7F88,$7F00,$7E80,$7E20
         fdb   $7D80,$7F08,$7D20,$7FB0
         
         fdb   $7C80,$7FD8,$7F18,$7FB8
         fdb   $7F48,$7FF8,$7E90,$7F30
         
         fdb   $7E00,$7EC0,$7F50,$7F90
         fdb   $0000,$7E70,$7FC0,$7F70
         
         fdb   $7FE8,$7E40,$7C40,$7DC0
         fdb   $7E10,$7EE0,$7C00,$7DA0
         
         fdb   $7F10,$7EF0,$7FC8,$7F78
         fdb   $7FF0,$7F20,$7F58,$7F98
         
         fdb   $7D40,$7F28,$7CC0,$7E60
         fdb   $7EA0,$7FA8,$7E30,$7DE0

         fdb   $8080,$7EB0,$7FA0,$7F38
         fdb   $7D60,$7B80,$7FD0,$7F40

         fdb   $7B00,$7F60,$7D00,$7FE0
         fdb   $7F80,$7F68,$7ED0,$7E50
                  
c_m0p1   fdb   $7DCC,$CCCD       ; -.1
c_3      fdb   $8240,$0000       ; 3 must follow c_m0p1

c_1o130  fdb   $797C,$0FC1       ; 1/130
c_159p5  fdb   $881F,$8000       ; 159.5
c_99p5   fdb   $8747,$0000       ; 99.5

c_sph    fdb   110,144,$8100
         fdb   208,47,$8180

c_1      fdb   $8100,$0000       ; 1
c_2      fdb   $8200,$0000       ; 2
c_7      fdb   $8360,$0000       ; 7

ground0  fdb   $8400,$0000       ; 8
ground1  fdb   $8450,$0000       ; 13

         echo  Size = &(*-ini) bytes
(info)
*iTime    rmb   2
*iRnd     rmb   2
*iX       rmb   2
*iY       rmb   2
*i2X      rmb   2

iTime    equ   $61A1
iRnd     equ   $61A3
iX       equ   $61A5
iY       equ   $61A7
i2X      equ   $61A9

fX       rmb   4
fY       rmb   4
fZ       rmb   4

fU       rmb   4
fV       rmb   4
fW       rmb   4

fI       equ   i2X+2
*fI       rmb   4
fE       rmb   4
fF       rmb   4
fP       rmb   4
fT       rmb   4

fCoord   rmb   2*320

         end   ini   