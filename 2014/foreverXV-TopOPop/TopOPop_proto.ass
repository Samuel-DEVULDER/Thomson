(main)TOPOPOP
***************************************
* TOPOPOP - Top Of the Pop
*
* Participation a la Forever Part 2015.
*
* - Player 3 voix (2 instru + 1 bruit)
* - forme d'onde
* - triangle de Sirpiensky
*
* Auteur: S.Devulder
* Date:   Fev 2014
***************************************
	
       org    $6700
       
PITCH  set    0      ; plus grave ?
SOUND  set    1      ; 0 pour mute
MUSIC  set    1
       
STATUS equ    $6019
TIMEPT equ    $6027

* 6848	
CRC    equ    $E7C1  ; ctrl port C
DDRC   equ    $E7C2  ; sens port C
PRC    equ    $E7C3  ; data port C

TCR    equ    $E7C5  ; reg cont timer
TMSB   equ    $E7C6  ; compteur timer

* 6821 musique et jeux
PRA    equ    $E7CC  ; data port A
PRB    equ    $E7CD  ; data port B
CRA    equ    $E7CE  ; ctrl port A
CRB    equ    $E7CF  ; ctrl port B

* Clavier
KTST   equ    $E809
GETC   equ    $E806

* Ecran
PUTC   equ    $E803

***************************************
* Alignement
***************************************
ALIGN  macro
       org    ((*+\0-1)/\0)*\0
       endm

***************************************
* boucle:
*      REPEAT
*      ....
*      WHILE  condition
***************************************
REPEAT macro
loop   set    *
       endm
WHILE  macro
       b\0    loop
       endm
LWHILE  macro
       lb\0    loop
       endm
	
***************************************
* variable dans code auto-modifiable
*
*      VAR1   opcode,val,label ;8 bits
*      VAR2   opcode,val,label ;16 bits
***************************************
VAR1   macro
       \0     \1
\2     set    *-1
       endm
VAR2   macro
       \0     \1
\2     set    *-2
       endm

***************************************
* Repetitions
***************************************
RPT1   macro
       \0     \1
       endm
RPT2   macro
       \0     \1
       \0     \1
       endm
RPT4   macro
       \0     \1
       \0     \1
       \0     \1
       \0     \1
       endm      
RPT8   macro
       \0     \1
       \0     \1
       \0     \1
       \0     \1
       \0     \1
       \0     \1
       \0     \1
       \0     \1
       endm       
RPT16  macro
       RPT8   \0,\1
       RPT8   \0,\1
       endm       
RPT32  macro
       RPT16  \0,\1
       RPT16  \0,\1
       endm       
RPT64  macro
       RPT32  \0,\1
       RPT32  \0,\1
       endm       
RPT128 macro
       RPT64  \0,\1
       RPT64  \0,\1
       endm       
RPT256 macro
       RPT128 \0,\1
       RPT128 \0,\1
       endm       
RPT    macro
       ifne   (\0)&1024
       RPT128 \1,\2
       RPT128 \1,\2
       RPT128 \1,\2
       RPT128 \1,\2
       RPT128 \1,\2
       RPT128 \1,\2
       RPT128 \1,\2
       RPT128 \1,\2
       endc
       ifne   (\0)&512
       RPT128 \1,\2
       RPT128 \1,\2
       RPT128 \1,\2
       RPT128 \1,\2
       endc
       ifne   (\0)&256
       RPT128 \1,\2
       RPT128 \1,\2
       endc
       ifne   (\0)&128
       RPT128 \1,\2
       endc
       ifne   (\0)&64
       RPT64  \1,\2
       endc
       ifne   (\0)&32
       RPT32  \1,\2
       endc
       ifne   (\0)&16
       RPT16  \1,\2
       endc
       ifne   (\0)&8
       RPT8   \1,\2
       endc
       ifne   (\0)&4
       RPT4   \1,\2
       endc
       ifne   (\0)&2
       RPT2   \1,\2
       endc
       ifne   (\0)&1
       RPT1   \1,\2
       endc
       endm

***************************************
* message
***************************************
OUTC1  macro
       ifne   1
       fcb    \0
       else
       ldb    #\0
       jsr    PUTC
       endc
       endm
OUTC2  macro
       OUTC1  \0
       OUTC1  \1
       endm
OUTC3  macro
       OUTC1  \0
       OUTC1  \1
       OUTC1  \2
       endm
OUTC4  macro
       OUTC1  \0
       OUTC1  \1
       OUTC1  \2
       OUTC1  \3
       endm
OUTC8  macro
       OUTC1  \0
       OUTC1  \1
       OUTC1  \2
       OUTC1  \3
       OUTC1  \4
       OUTC1  \5
       OUTC1  \6
       OUTC1  \7
       endm
FORME  macro           ; couleur forme
       OUTC2  27,$40+\0
       endm
FOND   macro           ; couleur fond
       OUTC2  27,$50+\0
       endm       
TOUR   macro           ; couleur tour
       OUTC2  27,$60+\0
       endm       
ATTR00 macro           ; 1x1
       OUTC2  27,$4C
       endm
ATTR01 macro           ; 1x2
       OUTC2  27,$4D
       endm
ATTR10 macro           ; 2x1
       OUTC2  27,$4E
       endm
ATTR11 macro           ; 2x2
       OUTC2  27,$4F
       endm
CSRON  macro           ; cursor on
       OUTC1  $11
       endm
CSROFF macro           ; cursor off
       OUTC1  $14
       endm
COLOFF macro           ; couleur off
       OUTC2  27,$68
       endm       
COLON  macro           ; couleur on
       OUTC2  27,$69
       endm       
CLRLIN macro           ; eff fin ligne
       OUTC1  24
       endm
CLS    macro           ; eff ecran
       OUTC1  12
       endm       
INV    macro           ; inverse video
       OUTC2  27,$5C
       endm
LOCATE macro
       OUTC3  $1F,$40+\1,$40+\0
       endm
       
TEXT   macro
       FORME  0
       FOND   0
       TOUR   0
       CLS
       endm

       
       
text2
       COLOFF
       fcc    /FOREVER XV/
       fcc    /          /
       fcc    /          /
       fcc    /   TOPOPOP/
       LOCATE 12,24
       fcc    /WWW.PULSDEMOS.COM/
       ATTR11
       LOCATE 18,12
       fcc    /OOO/
       LOCATE 19,13
       fcc    /OO/
len2   set    *-text2              
txt
       TEXT       
len    set    *-txt+1

       includ PLAYER.ASM
       
***************************************
* Point d'entree
***************************************
ini    set    *
       orcc   #$50
 
* message d'intro: le titre de la demo
       ldx    #txt
       leas   -128,x
* astuce: les repetitions de code sont
* tres bien compressees par EXOMIZER.
PRT    macro
       ldb    ,x+
       jsr    PUTC
       endm
       
       RPT    len,PRT

* astuce: le dernier PUTC affiche la 
* valeur de tick (1), ce qui provoque le
* passage en memoire forme par PUTC.
* En outre X pointe alors sur SNDINT
* ce qui permet a SNDINI de s'epargner
* un LDX.

       includ SNDINI.ASM
       includ SCOPEINI.ASM
       includ TRIANG.ASM
       ldx    #text2
       RPT    len2,PRT
       includ RAINBOW.ASM
       
* interruptions ON       
       andcc  #255-$50 ; int. on

       includ SCOPE.ASM       

Song   equ    *
       includ SONG.ASM
       fcb    cZZ
       
       includ SCOPEDAT.ASM       

       end    ini
(include)SCOPE.ASM
***************************************
* Oscilloscope
***************************************
oscil  pshs   d

       ldy    #offvid
osci1  ldu    #bufvid
       ldd    #128*256
       REPEAT
       std    ,s
       lda    ,u
       ldx    a,y
       lsra         ; v
       adca   #0
       adda   ,u    ; v+2v
       adda   out   ; 3v+o
       rora         ; (3v+o)/2
       adca   #0
       anda   #254  ; 2*((3v+o)/4)
       sta    ,u
       lda    ,s
       eora   b,x   ; effacement ancien
       sta    b,x
       lda    ,u+
       ldx    a,y
       ldd    ,s
       eora   b,x
       sta    b,x
       lda    ,s
       lsra
       WHILE  cc
       rora
       incb
       cmpb   #40
       WHILE  ne
       bra    osci1
(include)SCOPEINI.ASM
***************************************
* initialisation du scope
***************************************
* table des pointeurs memoire
       ldu    #offvid+64*2
       ldx    #$4000+(199-64)*40-40*16
inioff macro
       leax   40,x
       pshu   x
       endm
       RPT    64,inioff
       leax   40,x
       clra
       clrb
       tfr    d,y
inibuf macro
       com    ,-x
       pshu   d,y
       pshu   d,y
       endm
       RPT    40,inibuf
(include)SCOPEDAT.ASM
bufvid rmb    320   
offvid rmb    64*2
(include)TRIANG.ASM       
***************************************
* triangle de siepinsky
***************************************
       ldx    #$4000+40+12*40
       ldd    #$0100
       std    -21,x
       REPEAT 
       lda    -40,x
       tfr    a,b
       lsra
       ror    1,x
       eora   ,x
       sta    ,x
       clra
       lslb
       rola
       eorb   ,x
       eora   ,-x
       std    ,x++
       cmpx   #$5400+12*40
       WHILE  ne
(include)RAINBOW.ASM
***************************************
* arc en ciel dans la mémoire couleur       
***************************************
       dec    <PRC
       ldx    #$4000
       clra
rainb1 sta    ,-s
       lsra
       eora   ,s
       anda   #%00111000
       lbeq   rainb2
       ora    #%11000000
*       cmpa   -1,x
*       lbeq   rainb2
line   macro
       sta    ,x+
       endm
       RPT    3*40,line
*       ldy    #2000
*       REPEAT
*       leay   -1,y
*       WHILE  ne
rainb2 lda    ,s+
       adda   #%00001000
       cmpx   #$5F40
       lbmi   rainb1
       inc    <PRC
(include)SNDINI.ASM       
***************************************
* Initialisation du son
***************************************
*       orcc   #$50

*       ldx    #SNDINT ; intr timer
       stx    TIMEPT
       
       lda    #$E7
       tfr    a,dp
       setdp  $E7

* 8 interrupts timer pour DO 4
* (octave du LA 440)      
       ldd    #478<+PITCH
       std    <TMSB
       lda    #$42
       sta    <TCR
  
* Init musique et jeux
       ldd    #$043F
       clr    <CRB
       stb    <PRB
       sta    <CRB
       stb    <PRB     ; volume full

* autorisation interrupt timer       
SNDON  macro
       lda    #32*SOUND
*       ora    STATUS
       sta    STATUS
       endm
       SNDON

* TO7: buzzer clavier off
*       sta    $6073
       
(include)PLAYER.ASM
***************************************
* Interruption timer
***************************************  
*       ALIGN  256
tick   fcb    1
       setdp  $E7
SNDINT set    *
       VAR2   ldd,#SNDINT<-8,out
       sta    <PRB
       lda    <TMSB
       setdp  SNDINT<-8
       tfr    b,dp
       dec    <tick
       bne    doSnd
       ldb    #TEMPO<-PITCH
       stb    <tick

***************************************
* Commandes
* %1yxxzzzz y=canal x=octave z=note
* %01yxxxxx y=canal x=volume
* %001xxxxx x=noise
* %000xxxxx extra cmd
*     00000 TICK
*     00001 LOOP
***************************************
       VAR2   ldu,#Song,SongPt
NxtCmd lda    ,u
       ldb    ,u+
       bmi    CmdFRQ  ; NOTE
       beq    CmdEnd  ; TICK
       rolb
       bmi    CmdVOL  ; VOLUME
       rolb
       bmi    CmdNSE  ; BRUIT
       ldu    #Song
       bra    NxtCmd
CmdEnd stu    <SongPt
doSnd  set    *       
       VAR1   ldb,#0,noise
       beq    sndnor
       lsrb
       bne    bruit
       VAR2   ldd,#$03F9,seed1
       mul
       VAR1   addd,#0,seed2
       sta    <seed2
       stb    <seed1
       coma          ; forcage carry
       rorb
bruit  stb    <noise
       VAR1   ldb,#63,vol3
       bcs    sndnor
       clrb
* son normal       
sndnor set    *
       VAR1   lda,#0,frq1  ; oscilo 1
       VAR1   adda,#0,osc1
       sta    <osc1
       bpl    sndn2
       VAR1   addb,#31,vol1
sndn2  set    *
       VAR1   lda,#0,frq2  ; oscilo 2
       VAR1   adda,#0,osc2
       sta    <osc2
       bpl    sndn3
       VAR1   addb,#31,vol2
sndn3  stb    <out
       rti
***************************************
* %1yxxzzzz NOTE
***************************************
CmdFRQ ldx    #tabfrq
       andb   #%1111
       ldb    b,x
       bita   #%01000000
       bne    CmdFR1
       anda   #%00110000
       beq    CmdFR2
       REPEAT
       lsrb
       suba   #%00010000
       WHILE  ne
CmdFR2 stb    <frq1
       jmp    <NxtCmd
CmdFR1 anda   #%00110000
       beq    CmdFR3
       REPEAT
       lsrb
       suba   #%00010000
       WHILE  ne
CmdFR3 stb    <frq2
       jmp    <NxtCmd
***************************************
* %01yxxxxx VOLUME
***************************************
CmdVOL anda   #%00011111
       rolb
       bmi    CmdVL0
       sta    <vol2
       jmp    <NxtCmd
CmdVL0 sta    <vol1
       jmp    <NxtCmd
***************************************
* %001xxxxx NOISE
***************************************
CmdNSE anda   #%00011111
       beq    CmdNS2
       tst    <noise
       bne    CmdNS1
       inc    <noise
       bra    CmdNS1
CmdNS2 sta    <noise
CmdNS1 sta    <vol3
       jmp    <NxtCmd      
***************************************
* Definition des notes
***************************************
* DO     set    128
* RE     set    9*DO/8
* MI     set    10*DO/8
* FA     set    4*DO/3
* SOL    set    12*DO/8
* LA     set    5*DO/3
* SI     set    15*DO/8

n0P    set    %10000000
n1P    set    %11000000

* Game temperee
nP     set    0    ; Pause
nC     set    128  ; do
nCs    set    136  ; do#
nD     set    144  ; re
nDs    set    152  ; re#
nE     set    161  ; mi
nF     set    171  ; fa
nFs    set    181  ; fa#
nG     set    192  ; sol
nGs    set    203  ; sol#
nA     set    215  ; la
nAs    set    228  ; la#
nB     set    242  ; si

       ifne   0
* Gamme naturelle (diminuee)
nCs    set    nC*16/15
nD     set    nC*9/8
nDs    set    nC*6/5
nE     set    nC*5/4
nF     set    nC*4/3
nFs    set    nC*64/45
nG     set    nC*3/2
nGs    set    nC*8/5
nA     set    nC*5/3
nAs    set    nC*9/5
nB     set    nC*15/8
       endc

       ifne   0
* Gamme naturelle (augmentee)
nCs    set    nC*25/24
nDs    set    nC*75/64
nFs    set    nC*45/32
nGs    set    nC*25/16
nAs    set    nC*225/128
       endc

tabfrq fcb    nP<-(1+PITCH)
       fcb    nC<-(1+PITCH)
       fcb    nCs<-(1+PITCH)
       fcb    nD<-(1+PITCH)
       fcb    nDs<-(1+PITCH)
       fcb    nE<-(1+PITCH)
       fcb    nF<-(1+PITCH)
       fcb    nFs<-(1+PITCH)
       fcb    nG<-(1+PITCH)
       fcb    nGs<-(1+PITCH)
       fcb    nA<-(1+PITCH)
       fcb    nAs<-(1+PITCH)
       fcb    nB<-(1+PITCH)
              
NOTE   macro
n0\0\1 equ    iOCTAV+n0P+((4-\1)<+4)
n1\0\1 equ    iOCTAV+n1P+((4-\1)<+4)
iOCTAV set    iOCTAV+1
       endm

OCTAVE macro
iOCTAV set    1
       NOTE   C,\0
       NOTE   Cs,\0
       NOTE   D,\0
       NOTE   Ds,\0
       NOTE   E,\0
       NOTE   F,\0
       NOTE   Fs,\0
       NOTE   G,\0
       NOTE   Gs,\0
       NOTE   A,\0
       NOTE   As,\0
       NOTE   B,\0
       endm

       OCTAVE 1
       OCTAVE 2
       OCTAVE 3
       OCTAVE 4
       
cTK    equ    %00000000       
cV0    equ    %01000000
cV1    equ    %01100000
cNZ    equ    %00100000
cZZ    equ    %00000001

(include)SONG.ASM       
* song data will be added via Makefile rule